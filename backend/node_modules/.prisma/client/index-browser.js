
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  qiancaiDouBalance: 'qiancaiDouBalance',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  avatarData: 'avatarData',
  avatarMimeType: 'avatarMimeType',
  avatarSize: 'avatarSize',
  language: 'language',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QiancaiDouTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  newBalance: 'newBalance',
  reason: 'reason',
  description: 'description',
  refTable: 'refTable',
  refId: 'refId',
  createdAt: 'createdAt',
  type: 'type',
  direction: 'direction',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  orderId: 'orderId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  images: 'images',
  priceInQiancaiDou: 'priceInQiancaiDou',
  stock: 'stock',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalCost: 'totalCost',
  status: 'status',
  payMethod: 'payMethod',
  shippingAddressId: 'shippingAddressId',
  trackingNumber: 'trackingNumber',
  estimatedDelivery: 'estimatedDelivery',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paidAt: 'paidAt',
  cancelledAt: 'cancelledAt',
  fulfilledAt: 'fulfilledAt',
  refundedAt: 'refundedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice'
};

exports.Prisma.OfflineCourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructor: 'instructor',
  category: 'category',
  duration: 'duration',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScheduleScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  startTime: 'startTime',
  endTime: 'endTime',
  location: 'location',
  capacity: 'capacity',
  bookedSlots: 'bookedSlots',
  feeInQiancaiDou: 'feeInQiancaiDou',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserAppointmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  scheduleId: 'scheduleId',
  status: 'status',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TravelPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  summary: 'summary',
  category: 'category',
  tags: 'tags',
  imageUrl: 'imageUrl',
  images: 'images',
  author: 'author',
  isPublished: 'isPublished',
  viewCount: 'viewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  availableBalance: 'availableBalance',
  lockedBalance: 'lockedBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemsCount: 'itemsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity'
};

exports.Prisma.InventoryLockScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  receiverName: 'receiverName',
  phone: 'phone',
  province: 'province',
  city: 'city',
  district: 'district',
  detail: 'detail',
  zip: 'zip',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  carrier: 'carrier',
  trackingNo: 'trackingNo',
  status: 'status',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingTrackScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  status: 'status',
  description: 'description',
  location: 'location',
  timestamp: 'timestamp'
};

exports.Prisma.AppSettingScalarFieldEnum = {
  key: 'key',
  value: 'value',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudyAbroadServiceScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  description: 'description',
  serviceType: 'serviceType',
  durationWeeks: 'durationWeeks',
  priceUsd: 'priceUsd',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.SummerCampScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  description: 'description',
  imageUrl: 'imageUrl',
  startDate: 'startDate',
  endDate: 'endDate',
  ageRange: 'ageRange',
  priceUsd: 'priceUsd',
  maxParticipants: 'maxParticipants',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserStudyAbroadRegistrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceId: 'serviceId',
  registrationStatus: 'registrationStatus',
  registeredAt: 'registeredAt',
  cancelledAt: 'cancelledAt',
  completedAt: 'completedAt'
};

exports.Prisma.UserSummerCampRegistrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  summerCampId: 'summerCampId',
  registrationStatus: 'registrationStatus',
  registeredAt: 'registeredAt',
  cancelledAt: 'cancelledAt',
  completedAt: 'completedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.QiancaiDouTransactionType = exports.$Enums.QiancaiDouTransactionType = {
  EARN: 'EARN',
  SPEND: 'SPEND',
  REFUND: 'REFUND',
  LOCK: 'LOCK',
  UNLOCK: 'UNLOCK',
  ADJUST: 'ADJUST'
};

exports.TransactionDirection = exports.$Enums.TransactionDirection = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PayMethod = exports.$Enums.PayMethod = {
  QIANCAIDOU: 'QIANCAIDOU'
};

exports.InventoryLockStatus = exports.$Enums.InventoryLockStatus = {
  LOCKED: 'LOCKED',
  RELEASED: 'RELEASED',
  CONSUMED: 'CONSUMED'
};

exports.ShipmentStatus = exports.$Enums.ShipmentStatus = {
  PENDING: 'PENDING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED'
};

exports.Prisma.ModelName = {
  User: 'User',
  QiancaiDouTransaction: 'QiancaiDouTransaction',
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OfflineCourse: 'OfflineCourse',
  CourseSchedule: 'CourseSchedule',
  UserAppointment: 'UserAppointment',
  TravelPost: 'TravelPost',
  Account: 'Account',
  Cart: 'Cart',
  CartItem: 'CartItem',
  InventoryLock: 'InventoryLock',
  Address: 'Address',
  Shipment: 'Shipment',
  ShippingTrack: 'ShippingTrack',
  AppSetting: 'AppSetting',
  StudyAbroadService: 'StudyAbroadService',
  SummerCamp: 'SummerCamp',
  UserStudyAbroadRegistration: 'UserStudyAbroadRegistration',
  UserSummerCampRegistration: 'UserSummerCampRegistration'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)


/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model QiancaiDouTransaction
 * 
 */
export type QiancaiDouTransaction = $Result.DefaultSelection<Prisma.$QiancaiDouTransactionPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model OfflineCourse
 * 
 */
export type OfflineCourse = $Result.DefaultSelection<Prisma.$OfflineCoursePayload>
/**
 * Model CourseSchedule
 * 
 */
export type CourseSchedule = $Result.DefaultSelection<Prisma.$CourseSchedulePayload>
/**
 * Model UserAppointment
 * 
 */
export type UserAppointment = $Result.DefaultSelection<Prisma.$UserAppointmentPayload>
/**
 * Model TravelPost
 * 
 */
export type TravelPost = $Result.DefaultSelection<Prisma.$TravelPostPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.qiancaiDouTransaction`: Exposes CRUD operations for the **QiancaiDouTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QiancaiDouTransactions
    * const qiancaiDouTransactions = await prisma.qiancaiDouTransaction.findMany()
    * ```
    */
  get qiancaiDouTransaction(): Prisma.QiancaiDouTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.offlineCourse`: Exposes CRUD operations for the **OfflineCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OfflineCourses
    * const offlineCourses = await prisma.offlineCourse.findMany()
    * ```
    */
  get offlineCourse(): Prisma.OfflineCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseSchedule`: Exposes CRUD operations for the **CourseSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseSchedules
    * const courseSchedules = await prisma.courseSchedule.findMany()
    * ```
    */
  get courseSchedule(): Prisma.CourseScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAppointment`: Exposes CRUD operations for the **UserAppointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAppointments
    * const userAppointments = await prisma.userAppointment.findMany()
    * ```
    */
  get userAppointment(): Prisma.UserAppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.travelPost`: Exposes CRUD operations for the **TravelPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TravelPosts
    * const travelPosts = await prisma.travelPost.findMany()
    * ```
    */
  get travelPost(): Prisma.TravelPostDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    QiancaiDouTransaction: 'QiancaiDouTransaction',
    Product: 'Product',
    Order: 'Order',
    OrderItem: 'OrderItem',
    OfflineCourse: 'OfflineCourse',
    CourseSchedule: 'CourseSchedule',
    UserAppointment: 'UserAppointment',
    TravelPost: 'TravelPost'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "qiancaiDouTransaction" | "product" | "order" | "orderItem" | "offlineCourse" | "courseSchedule" | "userAppointment" | "travelPost"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      QiancaiDouTransaction: {
        payload: Prisma.$QiancaiDouTransactionPayload<ExtArgs>
        fields: Prisma.QiancaiDouTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QiancaiDouTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QiancaiDouTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>
          }
          findFirst: {
            args: Prisma.QiancaiDouTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QiancaiDouTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>
          }
          findMany: {
            args: Prisma.QiancaiDouTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>[]
          }
          create: {
            args: Prisma.QiancaiDouTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>
          }
          createMany: {
            args: Prisma.QiancaiDouTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QiancaiDouTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>[]
          }
          delete: {
            args: Prisma.QiancaiDouTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>
          }
          update: {
            args: Prisma.QiancaiDouTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>
          }
          deleteMany: {
            args: Prisma.QiancaiDouTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QiancaiDouTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QiancaiDouTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>[]
          }
          upsert: {
            args: Prisma.QiancaiDouTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QiancaiDouTransactionPayload>
          }
          aggregate: {
            args: Prisma.QiancaiDouTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQiancaiDouTransaction>
          }
          groupBy: {
            args: Prisma.QiancaiDouTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QiancaiDouTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QiancaiDouTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<QiancaiDouTransactionCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      OfflineCourse: {
        payload: Prisma.$OfflineCoursePayload<ExtArgs>
        fields: Prisma.OfflineCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfflineCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfflineCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>
          }
          findFirst: {
            args: Prisma.OfflineCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfflineCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>
          }
          findMany: {
            args: Prisma.OfflineCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>[]
          }
          create: {
            args: Prisma.OfflineCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>
          }
          createMany: {
            args: Prisma.OfflineCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OfflineCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>[]
          }
          delete: {
            args: Prisma.OfflineCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>
          }
          update: {
            args: Prisma.OfflineCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>
          }
          deleteMany: {
            args: Prisma.OfflineCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OfflineCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OfflineCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>[]
          }
          upsert: {
            args: Prisma.OfflineCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfflineCoursePayload>
          }
          aggregate: {
            args: Prisma.OfflineCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOfflineCourse>
          }
          groupBy: {
            args: Prisma.OfflineCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfflineCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfflineCourseCountArgs<ExtArgs>
            result: $Utils.Optional<OfflineCourseCountAggregateOutputType> | number
          }
        }
      }
      CourseSchedule: {
        payload: Prisma.$CourseSchedulePayload<ExtArgs>
        fields: Prisma.CourseScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          findFirst: {
            args: Prisma.CourseScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          findMany: {
            args: Prisma.CourseScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>[]
          }
          create: {
            args: Prisma.CourseScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          createMany: {
            args: Prisma.CourseScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>[]
          }
          delete: {
            args: Prisma.CourseScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          update: {
            args: Prisma.CourseScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          deleteMany: {
            args: Prisma.CourseScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>[]
          }
          upsert: {
            args: Prisma.CourseScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseSchedulePayload>
          }
          aggregate: {
            args: Prisma.CourseScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseSchedule>
          }
          groupBy: {
            args: Prisma.CourseScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<CourseScheduleCountAggregateOutputType> | number
          }
        }
      }
      UserAppointment: {
        payload: Prisma.$UserAppointmentPayload<ExtArgs>
        fields: Prisma.UserAppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>
          }
          findFirst: {
            args: Prisma.UserAppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>
          }
          findMany: {
            args: Prisma.UserAppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>[]
          }
          create: {
            args: Prisma.UserAppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>
          }
          createMany: {
            args: Prisma.UserAppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>[]
          }
          delete: {
            args: Prisma.UserAppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>
          }
          update: {
            args: Prisma.UserAppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>
          }
          deleteMany: {
            args: Prisma.UserAppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserAppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>[]
          }
          upsert: {
            args: Prisma.UserAppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAppointmentPayload>
          }
          aggregate: {
            args: Prisma.UserAppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAppointment>
          }
          groupBy: {
            args: Prisma.UserAppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<UserAppointmentCountAggregateOutputType> | number
          }
        }
      }
      TravelPost: {
        payload: Prisma.$TravelPostPayload<ExtArgs>
        fields: Prisma.TravelPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TravelPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TravelPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>
          }
          findFirst: {
            args: Prisma.TravelPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TravelPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>
          }
          findMany: {
            args: Prisma.TravelPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>[]
          }
          create: {
            args: Prisma.TravelPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>
          }
          createMany: {
            args: Prisma.TravelPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TravelPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>[]
          }
          delete: {
            args: Prisma.TravelPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>
          }
          update: {
            args: Prisma.TravelPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>
          }
          deleteMany: {
            args: Prisma.TravelPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TravelPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TravelPostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>[]
          }
          upsert: {
            args: Prisma.TravelPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelPostPayload>
          }
          aggregate: {
            args: Prisma.TravelPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTravelPost>
          }
          groupBy: {
            args: Prisma.TravelPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<TravelPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.TravelPostCountArgs<ExtArgs>
            result: $Utils.Optional<TravelPostCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    qiancaiDouTransaction?: QiancaiDouTransactionOmit
    product?: ProductOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    offlineCourse?: OfflineCourseOmit
    courseSchedule?: CourseScheduleOmit
    userAppointment?: UserAppointmentOmit
    travelPost?: TravelPostOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    qiancaiDouTransactions: number
    orders: number
    appointments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qiancaiDouTransactions?: boolean | UserCountOutputTypeCountQiancaiDouTransactionsArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQiancaiDouTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QiancaiDouTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAppointmentWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | ProductCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    items: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | OrderCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type OfflineCourseCountOutputType
   */

  export type OfflineCourseCountOutputType = {
    schedules: number
  }

  export type OfflineCourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | OfflineCourseCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * OfflineCourseCountOutputType without action
   */
  export type OfflineCourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourseCountOutputType
     */
    select?: OfflineCourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OfflineCourseCountOutputType without action
   */
  export type OfflineCourseCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseScheduleWhereInput
  }


  /**
   * Count Type CourseScheduleCountOutputType
   */

  export type CourseScheduleCountOutputType = {
    appointments: number
  }

  export type CourseScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | CourseScheduleCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * CourseScheduleCountOutputType without action
   */
  export type CourseScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseScheduleCountOutputType
     */
    select?: CourseScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseScheduleCountOutputType without action
   */
  export type CourseScheduleCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAppointmentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    qiancaiDouBalance: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    qiancaiDouBalance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    qiancaiDouBalance: number | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    language: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    qiancaiDouBalance: number | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    language: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    qiancaiDouBalance: number
    firstName: number
    lastName: number
    avatarUrl: number
    language: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    qiancaiDouBalance?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    qiancaiDouBalance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    qiancaiDouBalance?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    qiancaiDouBalance?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    qiancaiDouBalance?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    qiancaiDouBalance: number
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    language: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    qiancaiDouBalance?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qiancaiDouTransactions?: boolean | User$qiancaiDouTransactionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    qiancaiDouBalance?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    qiancaiDouBalance?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    qiancaiDouBalance?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "qiancaiDouBalance" | "firstName" | "lastName" | "avatarUrl" | "language" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qiancaiDouTransactions?: boolean | User$qiancaiDouTransactionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      qiancaiDouTransactions: Prisma.$QiancaiDouTransactionPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      appointments: Prisma.$UserAppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      qiancaiDouBalance: number
      firstName: string | null
      lastName: string | null
      avatarUrl: string | null
      language: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qiancaiDouTransactions<T extends User$qiancaiDouTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$qiancaiDouTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly qiancaiDouBalance: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly language: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.qiancaiDouTransactions
   */
  export type User$qiancaiDouTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    where?: QiancaiDouTransactionWhereInput
    orderBy?: QiancaiDouTransactionOrderByWithRelationInput | QiancaiDouTransactionOrderByWithRelationInput[]
    cursor?: QiancaiDouTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QiancaiDouTransactionScalarFieldEnum | QiancaiDouTransactionScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    where?: UserAppointmentWhereInput
    orderBy?: UserAppointmentOrderByWithRelationInput | UserAppointmentOrderByWithRelationInput[]
    cursor?: UserAppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAppointmentScalarFieldEnum | UserAppointmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model QiancaiDouTransaction
   */

  export type AggregateQiancaiDouTransaction = {
    _count: QiancaiDouTransactionCountAggregateOutputType | null
    _avg: QiancaiDouTransactionAvgAggregateOutputType | null
    _sum: QiancaiDouTransactionSumAggregateOutputType | null
    _min: QiancaiDouTransactionMinAggregateOutputType | null
    _max: QiancaiDouTransactionMaxAggregateOutputType | null
  }

  export type QiancaiDouTransactionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    newBalance: number | null
  }

  export type QiancaiDouTransactionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    newBalance: number | null
  }

  export type QiancaiDouTransactionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    newBalance: number | null
    reason: string | null
    description: string | null
    refTable: string | null
    refId: string | null
    createdAt: Date | null
  }

  export type QiancaiDouTransactionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: number | null
    newBalance: number | null
    reason: string | null
    description: string | null
    refTable: string | null
    refId: string | null
    createdAt: Date | null
  }

  export type QiancaiDouTransactionCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    newBalance: number
    reason: number
    description: number
    refTable: number
    refId: number
    createdAt: number
    _all: number
  }


  export type QiancaiDouTransactionAvgAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    newBalance?: true
  }

  export type QiancaiDouTransactionSumAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    newBalance?: true
  }

  export type QiancaiDouTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    newBalance?: true
    reason?: true
    description?: true
    refTable?: true
    refId?: true
    createdAt?: true
  }

  export type QiancaiDouTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    newBalance?: true
    reason?: true
    description?: true
    refTable?: true
    refId?: true
    createdAt?: true
  }

  export type QiancaiDouTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    newBalance?: true
    reason?: true
    description?: true
    refTable?: true
    refId?: true
    createdAt?: true
    _all?: true
  }

  export type QiancaiDouTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QiancaiDouTransaction to aggregate.
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QiancaiDouTransactions to fetch.
     */
    orderBy?: QiancaiDouTransactionOrderByWithRelationInput | QiancaiDouTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QiancaiDouTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QiancaiDouTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QiancaiDouTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QiancaiDouTransactions
    **/
    _count?: true | QiancaiDouTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QiancaiDouTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QiancaiDouTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QiancaiDouTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QiancaiDouTransactionMaxAggregateInputType
  }

  export type GetQiancaiDouTransactionAggregateType<T extends QiancaiDouTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateQiancaiDouTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQiancaiDouTransaction[P]>
      : GetScalarType<T[P], AggregateQiancaiDouTransaction[P]>
  }




  export type QiancaiDouTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QiancaiDouTransactionWhereInput
    orderBy?: QiancaiDouTransactionOrderByWithAggregationInput | QiancaiDouTransactionOrderByWithAggregationInput[]
    by: QiancaiDouTransactionScalarFieldEnum[] | QiancaiDouTransactionScalarFieldEnum
    having?: QiancaiDouTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QiancaiDouTransactionCountAggregateInputType | true
    _avg?: QiancaiDouTransactionAvgAggregateInputType
    _sum?: QiancaiDouTransactionSumAggregateInputType
    _min?: QiancaiDouTransactionMinAggregateInputType
    _max?: QiancaiDouTransactionMaxAggregateInputType
  }

  export type QiancaiDouTransactionGroupByOutputType = {
    id: number
    userId: number
    amount: number
    newBalance: number
    reason: string
    description: string | null
    refTable: string | null
    refId: string | null
    createdAt: Date
    _count: QiancaiDouTransactionCountAggregateOutputType | null
    _avg: QiancaiDouTransactionAvgAggregateOutputType | null
    _sum: QiancaiDouTransactionSumAggregateOutputType | null
    _min: QiancaiDouTransactionMinAggregateOutputType | null
    _max: QiancaiDouTransactionMaxAggregateOutputType | null
  }

  type GetQiancaiDouTransactionGroupByPayload<T extends QiancaiDouTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QiancaiDouTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QiancaiDouTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QiancaiDouTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], QiancaiDouTransactionGroupByOutputType[P]>
        }
      >
    >


  export type QiancaiDouTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    newBalance?: boolean
    reason?: boolean
    description?: boolean
    refTable?: boolean
    refId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qiancaiDouTransaction"]>

  export type QiancaiDouTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    newBalance?: boolean
    reason?: boolean
    description?: boolean
    refTable?: boolean
    refId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qiancaiDouTransaction"]>

  export type QiancaiDouTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    newBalance?: boolean
    reason?: boolean
    description?: boolean
    refTable?: boolean
    refId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qiancaiDouTransaction"]>

  export type QiancaiDouTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    newBalance?: boolean
    reason?: boolean
    description?: boolean
    refTable?: boolean
    refId?: boolean
    createdAt?: boolean
  }

  export type QiancaiDouTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "amount" | "newBalance" | "reason" | "description" | "refTable" | "refId" | "createdAt", ExtArgs["result"]["qiancaiDouTransaction"]>
  export type QiancaiDouTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type QiancaiDouTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type QiancaiDouTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $QiancaiDouTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QiancaiDouTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      amount: number
      newBalance: number
      reason: string
      description: string | null
      refTable: string | null
      refId: string | null
      createdAt: Date
    }, ExtArgs["result"]["qiancaiDouTransaction"]>
    composites: {}
  }

  type QiancaiDouTransactionGetPayload<S extends boolean | null | undefined | QiancaiDouTransactionDefaultArgs> = $Result.GetResult<Prisma.$QiancaiDouTransactionPayload, S>

  type QiancaiDouTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QiancaiDouTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QiancaiDouTransactionCountAggregateInputType | true
    }

  export interface QiancaiDouTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QiancaiDouTransaction'], meta: { name: 'QiancaiDouTransaction' } }
    /**
     * Find zero or one QiancaiDouTransaction that matches the filter.
     * @param {QiancaiDouTransactionFindUniqueArgs} args - Arguments to find a QiancaiDouTransaction
     * @example
     * // Get one QiancaiDouTransaction
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QiancaiDouTransactionFindUniqueArgs>(args: SelectSubset<T, QiancaiDouTransactionFindUniqueArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QiancaiDouTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QiancaiDouTransactionFindUniqueOrThrowArgs} args - Arguments to find a QiancaiDouTransaction
     * @example
     * // Get one QiancaiDouTransaction
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QiancaiDouTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, QiancaiDouTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QiancaiDouTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionFindFirstArgs} args - Arguments to find a QiancaiDouTransaction
     * @example
     * // Get one QiancaiDouTransaction
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QiancaiDouTransactionFindFirstArgs>(args?: SelectSubset<T, QiancaiDouTransactionFindFirstArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QiancaiDouTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionFindFirstOrThrowArgs} args - Arguments to find a QiancaiDouTransaction
     * @example
     * // Get one QiancaiDouTransaction
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QiancaiDouTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, QiancaiDouTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QiancaiDouTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QiancaiDouTransactions
     * const qiancaiDouTransactions = await prisma.qiancaiDouTransaction.findMany()
     * 
     * // Get first 10 QiancaiDouTransactions
     * const qiancaiDouTransactions = await prisma.qiancaiDouTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qiancaiDouTransactionWithIdOnly = await prisma.qiancaiDouTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QiancaiDouTransactionFindManyArgs>(args?: SelectSubset<T, QiancaiDouTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QiancaiDouTransaction.
     * @param {QiancaiDouTransactionCreateArgs} args - Arguments to create a QiancaiDouTransaction.
     * @example
     * // Create one QiancaiDouTransaction
     * const QiancaiDouTransaction = await prisma.qiancaiDouTransaction.create({
     *   data: {
     *     // ... data to create a QiancaiDouTransaction
     *   }
     * })
     * 
     */
    create<T extends QiancaiDouTransactionCreateArgs>(args: SelectSubset<T, QiancaiDouTransactionCreateArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QiancaiDouTransactions.
     * @param {QiancaiDouTransactionCreateManyArgs} args - Arguments to create many QiancaiDouTransactions.
     * @example
     * // Create many QiancaiDouTransactions
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QiancaiDouTransactionCreateManyArgs>(args?: SelectSubset<T, QiancaiDouTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QiancaiDouTransactions and returns the data saved in the database.
     * @param {QiancaiDouTransactionCreateManyAndReturnArgs} args - Arguments to create many QiancaiDouTransactions.
     * @example
     * // Create many QiancaiDouTransactions
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QiancaiDouTransactions and only return the `id`
     * const qiancaiDouTransactionWithIdOnly = await prisma.qiancaiDouTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QiancaiDouTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, QiancaiDouTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QiancaiDouTransaction.
     * @param {QiancaiDouTransactionDeleteArgs} args - Arguments to delete one QiancaiDouTransaction.
     * @example
     * // Delete one QiancaiDouTransaction
     * const QiancaiDouTransaction = await prisma.qiancaiDouTransaction.delete({
     *   where: {
     *     // ... filter to delete one QiancaiDouTransaction
     *   }
     * })
     * 
     */
    delete<T extends QiancaiDouTransactionDeleteArgs>(args: SelectSubset<T, QiancaiDouTransactionDeleteArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QiancaiDouTransaction.
     * @param {QiancaiDouTransactionUpdateArgs} args - Arguments to update one QiancaiDouTransaction.
     * @example
     * // Update one QiancaiDouTransaction
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QiancaiDouTransactionUpdateArgs>(args: SelectSubset<T, QiancaiDouTransactionUpdateArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QiancaiDouTransactions.
     * @param {QiancaiDouTransactionDeleteManyArgs} args - Arguments to filter QiancaiDouTransactions to delete.
     * @example
     * // Delete a few QiancaiDouTransactions
     * const { count } = await prisma.qiancaiDouTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QiancaiDouTransactionDeleteManyArgs>(args?: SelectSubset<T, QiancaiDouTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QiancaiDouTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QiancaiDouTransactions
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QiancaiDouTransactionUpdateManyArgs>(args: SelectSubset<T, QiancaiDouTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QiancaiDouTransactions and returns the data updated in the database.
     * @param {QiancaiDouTransactionUpdateManyAndReturnArgs} args - Arguments to update many QiancaiDouTransactions.
     * @example
     * // Update many QiancaiDouTransactions
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QiancaiDouTransactions and only return the `id`
     * const qiancaiDouTransactionWithIdOnly = await prisma.qiancaiDouTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QiancaiDouTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, QiancaiDouTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QiancaiDouTransaction.
     * @param {QiancaiDouTransactionUpsertArgs} args - Arguments to update or create a QiancaiDouTransaction.
     * @example
     * // Update or create a QiancaiDouTransaction
     * const qiancaiDouTransaction = await prisma.qiancaiDouTransaction.upsert({
     *   create: {
     *     // ... data to create a QiancaiDouTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QiancaiDouTransaction we want to update
     *   }
     * })
     */
    upsert<T extends QiancaiDouTransactionUpsertArgs>(args: SelectSubset<T, QiancaiDouTransactionUpsertArgs<ExtArgs>>): Prisma__QiancaiDouTransactionClient<$Result.GetResult<Prisma.$QiancaiDouTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QiancaiDouTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionCountArgs} args - Arguments to filter QiancaiDouTransactions to count.
     * @example
     * // Count the number of QiancaiDouTransactions
     * const count = await prisma.qiancaiDouTransaction.count({
     *   where: {
     *     // ... the filter for the QiancaiDouTransactions we want to count
     *   }
     * })
    **/
    count<T extends QiancaiDouTransactionCountArgs>(
      args?: Subset<T, QiancaiDouTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QiancaiDouTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QiancaiDouTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QiancaiDouTransactionAggregateArgs>(args: Subset<T, QiancaiDouTransactionAggregateArgs>): Prisma.PrismaPromise<GetQiancaiDouTransactionAggregateType<T>>

    /**
     * Group by QiancaiDouTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QiancaiDouTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QiancaiDouTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QiancaiDouTransactionGroupByArgs['orderBy'] }
        : { orderBy?: QiancaiDouTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QiancaiDouTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQiancaiDouTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QiancaiDouTransaction model
   */
  readonly fields: QiancaiDouTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QiancaiDouTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QiancaiDouTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QiancaiDouTransaction model
   */
  interface QiancaiDouTransactionFieldRefs {
    readonly id: FieldRef<"QiancaiDouTransaction", 'Int'>
    readonly userId: FieldRef<"QiancaiDouTransaction", 'Int'>
    readonly amount: FieldRef<"QiancaiDouTransaction", 'Int'>
    readonly newBalance: FieldRef<"QiancaiDouTransaction", 'Int'>
    readonly reason: FieldRef<"QiancaiDouTransaction", 'String'>
    readonly description: FieldRef<"QiancaiDouTransaction", 'String'>
    readonly refTable: FieldRef<"QiancaiDouTransaction", 'String'>
    readonly refId: FieldRef<"QiancaiDouTransaction", 'String'>
    readonly createdAt: FieldRef<"QiancaiDouTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QiancaiDouTransaction findUnique
   */
  export type QiancaiDouTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * Filter, which QiancaiDouTransaction to fetch.
     */
    where: QiancaiDouTransactionWhereUniqueInput
  }

  /**
   * QiancaiDouTransaction findUniqueOrThrow
   */
  export type QiancaiDouTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * Filter, which QiancaiDouTransaction to fetch.
     */
    where: QiancaiDouTransactionWhereUniqueInput
  }

  /**
   * QiancaiDouTransaction findFirst
   */
  export type QiancaiDouTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * Filter, which QiancaiDouTransaction to fetch.
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QiancaiDouTransactions to fetch.
     */
    orderBy?: QiancaiDouTransactionOrderByWithRelationInput | QiancaiDouTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QiancaiDouTransactions.
     */
    cursor?: QiancaiDouTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QiancaiDouTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QiancaiDouTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QiancaiDouTransactions.
     */
    distinct?: QiancaiDouTransactionScalarFieldEnum | QiancaiDouTransactionScalarFieldEnum[]
  }

  /**
   * QiancaiDouTransaction findFirstOrThrow
   */
  export type QiancaiDouTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * Filter, which QiancaiDouTransaction to fetch.
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QiancaiDouTransactions to fetch.
     */
    orderBy?: QiancaiDouTransactionOrderByWithRelationInput | QiancaiDouTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QiancaiDouTransactions.
     */
    cursor?: QiancaiDouTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QiancaiDouTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QiancaiDouTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QiancaiDouTransactions.
     */
    distinct?: QiancaiDouTransactionScalarFieldEnum | QiancaiDouTransactionScalarFieldEnum[]
  }

  /**
   * QiancaiDouTransaction findMany
   */
  export type QiancaiDouTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * Filter, which QiancaiDouTransactions to fetch.
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QiancaiDouTransactions to fetch.
     */
    orderBy?: QiancaiDouTransactionOrderByWithRelationInput | QiancaiDouTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QiancaiDouTransactions.
     */
    cursor?: QiancaiDouTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QiancaiDouTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QiancaiDouTransactions.
     */
    skip?: number
    distinct?: QiancaiDouTransactionScalarFieldEnum | QiancaiDouTransactionScalarFieldEnum[]
  }

  /**
   * QiancaiDouTransaction create
   */
  export type QiancaiDouTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a QiancaiDouTransaction.
     */
    data: XOR<QiancaiDouTransactionCreateInput, QiancaiDouTransactionUncheckedCreateInput>
  }

  /**
   * QiancaiDouTransaction createMany
   */
  export type QiancaiDouTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QiancaiDouTransactions.
     */
    data: QiancaiDouTransactionCreateManyInput | QiancaiDouTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QiancaiDouTransaction createManyAndReturn
   */
  export type QiancaiDouTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many QiancaiDouTransactions.
     */
    data: QiancaiDouTransactionCreateManyInput | QiancaiDouTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QiancaiDouTransaction update
   */
  export type QiancaiDouTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a QiancaiDouTransaction.
     */
    data: XOR<QiancaiDouTransactionUpdateInput, QiancaiDouTransactionUncheckedUpdateInput>
    /**
     * Choose, which QiancaiDouTransaction to update.
     */
    where: QiancaiDouTransactionWhereUniqueInput
  }

  /**
   * QiancaiDouTransaction updateMany
   */
  export type QiancaiDouTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QiancaiDouTransactions.
     */
    data: XOR<QiancaiDouTransactionUpdateManyMutationInput, QiancaiDouTransactionUncheckedUpdateManyInput>
    /**
     * Filter which QiancaiDouTransactions to update
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * Limit how many QiancaiDouTransactions to update.
     */
    limit?: number
  }

  /**
   * QiancaiDouTransaction updateManyAndReturn
   */
  export type QiancaiDouTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * The data used to update QiancaiDouTransactions.
     */
    data: XOR<QiancaiDouTransactionUpdateManyMutationInput, QiancaiDouTransactionUncheckedUpdateManyInput>
    /**
     * Filter which QiancaiDouTransactions to update
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * Limit how many QiancaiDouTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QiancaiDouTransaction upsert
   */
  export type QiancaiDouTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the QiancaiDouTransaction to update in case it exists.
     */
    where: QiancaiDouTransactionWhereUniqueInput
    /**
     * In case the QiancaiDouTransaction found by the `where` argument doesn't exist, create a new QiancaiDouTransaction with this data.
     */
    create: XOR<QiancaiDouTransactionCreateInput, QiancaiDouTransactionUncheckedCreateInput>
    /**
     * In case the QiancaiDouTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QiancaiDouTransactionUpdateInput, QiancaiDouTransactionUncheckedUpdateInput>
  }

  /**
   * QiancaiDouTransaction delete
   */
  export type QiancaiDouTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
    /**
     * Filter which QiancaiDouTransaction to delete.
     */
    where: QiancaiDouTransactionWhereUniqueInput
  }

  /**
   * QiancaiDouTransaction deleteMany
   */
  export type QiancaiDouTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QiancaiDouTransactions to delete
     */
    where?: QiancaiDouTransactionWhereInput
    /**
     * Limit how many QiancaiDouTransactions to delete.
     */
    limit?: number
  }

  /**
   * QiancaiDouTransaction without action
   */
  export type QiancaiDouTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QiancaiDouTransaction
     */
    select?: QiancaiDouTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QiancaiDouTransaction
     */
    omit?: QiancaiDouTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QiancaiDouTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    priceInQiancaiDou: number | null
    stock: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    priceInQiancaiDou: number | null
    stock: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    priceInQiancaiDou: number | null
    stock: number | null
    category: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    priceInQiancaiDou: number | null
    stock: number | null
    category: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    title: number
    description: number
    images: number
    priceInQiancaiDou: number
    stock: number
    category: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    priceInQiancaiDou?: true
    stock?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    priceInQiancaiDou?: true
    stock?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    priceInQiancaiDou?: true
    stock?: true
    category?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    priceInQiancaiDou?: true
    stock?: true
    category?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    images?: true
    priceInQiancaiDou?: true
    stock?: true
    category?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    title: string
    description: string
    images: string[]
    priceInQiancaiDou: number
    stock: number
    category: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    images?: boolean
    priceInQiancaiDou?: boolean
    stock?: boolean
    category?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    images?: boolean
    priceInQiancaiDou?: boolean
    stock?: boolean
    category?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    images?: boolean
    priceInQiancaiDou?: boolean
    stock?: boolean
    category?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    images?: boolean
    priceInQiancaiDou?: boolean
    stock?: boolean
    category?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "images" | "priceInQiancaiDou" | "stock" | "category" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      images: string[]
      priceInQiancaiDou: number
      stock: number
      category: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderItems<T extends Product$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly title: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly images: FieldRef<"Product", 'String[]'>
    readonly priceInQiancaiDou: FieldRef<"Product", 'Int'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly category: FieldRef<"Product", 'String'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.orderItems
   */
  export type Product$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalCost: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalCost: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    totalCost: number | null
    status: string | null
    shippingAddress: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    totalCost: number | null
    status: string | null
    shippingAddress: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    totalCost: number
    status: number
    shippingAddress: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    totalCost?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    totalCost?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    totalCost?: true
    status?: true
    shippingAddress?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    totalCost?: true
    status?: true
    shippingAddress?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    totalCost?: true
    status?: true
    shippingAddress?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    userId: number
    totalCost: number
    status: string
    shippingAddress: string | null
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalCost?: boolean
    status?: boolean
    shippingAddress?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Order$itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalCost?: boolean
    status?: boolean
    shippingAddress?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalCost?: boolean
    status?: boolean
    shippingAddress?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    totalCost?: boolean
    status?: boolean
    shippingAddress?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "totalCost" | "status" | "shippingAddress" | "note" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Order$itemsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      totalCost: number
      status: string
      shippingAddress: string | null
      note: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Order$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly userId: FieldRef<"Order", 'Int'>
    readonly totalCost: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'String'>
    readonly shippingAddress: FieldRef<"Order", 'String'>
    readonly note: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.items
   */
  export type Order$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: number
    orderId: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "quantity" | "unitPrice" | "totalPrice", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      productId: number
      quantity: number
      unitPrice: number
      totalPrice: number
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'Int'>
    readonly orderId: FieldRef<"OrderItem", 'Int'>
    readonly productId: FieldRef<"OrderItem", 'Int'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly unitPrice: FieldRef<"OrderItem", 'Int'>
    readonly totalPrice: FieldRef<"OrderItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model OfflineCourse
   */

  export type AggregateOfflineCourse = {
    _count: OfflineCourseCountAggregateOutputType | null
    _avg: OfflineCourseAvgAggregateOutputType | null
    _sum: OfflineCourseSumAggregateOutputType | null
    _min: OfflineCourseMinAggregateOutputType | null
    _max: OfflineCourseMaxAggregateOutputType | null
  }

  export type OfflineCourseAvgAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type OfflineCourseSumAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type OfflineCourseMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    instructor: string | null
    category: string | null
    duration: number | null
    imageUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfflineCourseMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    instructor: string | null
    category: string | null
    duration: number | null
    imageUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfflineCourseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    instructor: number
    category: number
    duration: number
    imageUrl: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OfflineCourseAvgAggregateInputType = {
    id?: true
    duration?: true
  }

  export type OfflineCourseSumAggregateInputType = {
    id?: true
    duration?: true
  }

  export type OfflineCourseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructor?: true
    category?: true
    duration?: true
    imageUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfflineCourseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructor?: true
    category?: true
    duration?: true
    imageUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfflineCourseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructor?: true
    category?: true
    duration?: true
    imageUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OfflineCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OfflineCourse to aggregate.
     */
    where?: OfflineCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfflineCourses to fetch.
     */
    orderBy?: OfflineCourseOrderByWithRelationInput | OfflineCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfflineCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfflineCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfflineCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OfflineCourses
    **/
    _count?: true | OfflineCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfflineCourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfflineCourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfflineCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfflineCourseMaxAggregateInputType
  }

  export type GetOfflineCourseAggregateType<T extends OfflineCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateOfflineCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOfflineCourse[P]>
      : GetScalarType<T[P], AggregateOfflineCourse[P]>
  }




  export type OfflineCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfflineCourseWhereInput
    orderBy?: OfflineCourseOrderByWithAggregationInput | OfflineCourseOrderByWithAggregationInput[]
    by: OfflineCourseScalarFieldEnum[] | OfflineCourseScalarFieldEnum
    having?: OfflineCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfflineCourseCountAggregateInputType | true
    _avg?: OfflineCourseAvgAggregateInputType
    _sum?: OfflineCourseSumAggregateInputType
    _min?: OfflineCourseMinAggregateInputType
    _max?: OfflineCourseMaxAggregateInputType
  }

  export type OfflineCourseGroupByOutputType = {
    id: number
    title: string
    description: string
    instructor: string | null
    category: string
    duration: number | null
    imageUrl: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: OfflineCourseCountAggregateOutputType | null
    _avg: OfflineCourseAvgAggregateOutputType | null
    _sum: OfflineCourseSumAggregateOutputType | null
    _min: OfflineCourseMinAggregateOutputType | null
    _max: OfflineCourseMaxAggregateOutputType | null
  }

  type GetOfflineCourseGroupByPayload<T extends OfflineCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfflineCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfflineCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfflineCourseGroupByOutputType[P]>
            : GetScalarType<T[P], OfflineCourseGroupByOutputType[P]>
        }
      >
    >


  export type OfflineCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructor?: boolean
    category?: boolean
    duration?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schedules?: boolean | OfflineCourse$schedulesArgs<ExtArgs>
    _count?: boolean | OfflineCourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["offlineCourse"]>

  export type OfflineCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructor?: boolean
    category?: boolean
    duration?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["offlineCourse"]>

  export type OfflineCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructor?: boolean
    category?: boolean
    duration?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["offlineCourse"]>

  export type OfflineCourseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    instructor?: boolean
    category?: boolean
    duration?: boolean
    imageUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OfflineCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "instructor" | "category" | "duration" | "imageUrl" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["offlineCourse"]>
  export type OfflineCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | OfflineCourse$schedulesArgs<ExtArgs>
    _count?: boolean | OfflineCourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OfflineCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OfflineCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OfflineCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OfflineCourse"
    objects: {
      schedules: Prisma.$CourseSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      instructor: string | null
      category: string
      duration: number | null
      imageUrl: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["offlineCourse"]>
    composites: {}
  }

  type OfflineCourseGetPayload<S extends boolean | null | undefined | OfflineCourseDefaultArgs> = $Result.GetResult<Prisma.$OfflineCoursePayload, S>

  type OfflineCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OfflineCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OfflineCourseCountAggregateInputType | true
    }

  export interface OfflineCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OfflineCourse'], meta: { name: 'OfflineCourse' } }
    /**
     * Find zero or one OfflineCourse that matches the filter.
     * @param {OfflineCourseFindUniqueArgs} args - Arguments to find a OfflineCourse
     * @example
     * // Get one OfflineCourse
     * const offlineCourse = await prisma.offlineCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OfflineCourseFindUniqueArgs>(args: SelectSubset<T, OfflineCourseFindUniqueArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OfflineCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OfflineCourseFindUniqueOrThrowArgs} args - Arguments to find a OfflineCourse
     * @example
     * // Get one OfflineCourse
     * const offlineCourse = await prisma.offlineCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OfflineCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, OfflineCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OfflineCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseFindFirstArgs} args - Arguments to find a OfflineCourse
     * @example
     * // Get one OfflineCourse
     * const offlineCourse = await prisma.offlineCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OfflineCourseFindFirstArgs>(args?: SelectSubset<T, OfflineCourseFindFirstArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OfflineCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseFindFirstOrThrowArgs} args - Arguments to find a OfflineCourse
     * @example
     * // Get one OfflineCourse
     * const offlineCourse = await prisma.offlineCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OfflineCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, OfflineCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OfflineCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OfflineCourses
     * const offlineCourses = await prisma.offlineCourse.findMany()
     * 
     * // Get first 10 OfflineCourses
     * const offlineCourses = await prisma.offlineCourse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offlineCourseWithIdOnly = await prisma.offlineCourse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OfflineCourseFindManyArgs>(args?: SelectSubset<T, OfflineCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OfflineCourse.
     * @param {OfflineCourseCreateArgs} args - Arguments to create a OfflineCourse.
     * @example
     * // Create one OfflineCourse
     * const OfflineCourse = await prisma.offlineCourse.create({
     *   data: {
     *     // ... data to create a OfflineCourse
     *   }
     * })
     * 
     */
    create<T extends OfflineCourseCreateArgs>(args: SelectSubset<T, OfflineCourseCreateArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OfflineCourses.
     * @param {OfflineCourseCreateManyArgs} args - Arguments to create many OfflineCourses.
     * @example
     * // Create many OfflineCourses
     * const offlineCourse = await prisma.offlineCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OfflineCourseCreateManyArgs>(args?: SelectSubset<T, OfflineCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OfflineCourses and returns the data saved in the database.
     * @param {OfflineCourseCreateManyAndReturnArgs} args - Arguments to create many OfflineCourses.
     * @example
     * // Create many OfflineCourses
     * const offlineCourse = await prisma.offlineCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OfflineCourses and only return the `id`
     * const offlineCourseWithIdOnly = await prisma.offlineCourse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OfflineCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, OfflineCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OfflineCourse.
     * @param {OfflineCourseDeleteArgs} args - Arguments to delete one OfflineCourse.
     * @example
     * // Delete one OfflineCourse
     * const OfflineCourse = await prisma.offlineCourse.delete({
     *   where: {
     *     // ... filter to delete one OfflineCourse
     *   }
     * })
     * 
     */
    delete<T extends OfflineCourseDeleteArgs>(args: SelectSubset<T, OfflineCourseDeleteArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OfflineCourse.
     * @param {OfflineCourseUpdateArgs} args - Arguments to update one OfflineCourse.
     * @example
     * // Update one OfflineCourse
     * const offlineCourse = await prisma.offlineCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OfflineCourseUpdateArgs>(args: SelectSubset<T, OfflineCourseUpdateArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OfflineCourses.
     * @param {OfflineCourseDeleteManyArgs} args - Arguments to filter OfflineCourses to delete.
     * @example
     * // Delete a few OfflineCourses
     * const { count } = await prisma.offlineCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OfflineCourseDeleteManyArgs>(args?: SelectSubset<T, OfflineCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OfflineCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OfflineCourses
     * const offlineCourse = await prisma.offlineCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OfflineCourseUpdateManyArgs>(args: SelectSubset<T, OfflineCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OfflineCourses and returns the data updated in the database.
     * @param {OfflineCourseUpdateManyAndReturnArgs} args - Arguments to update many OfflineCourses.
     * @example
     * // Update many OfflineCourses
     * const offlineCourse = await prisma.offlineCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OfflineCourses and only return the `id`
     * const offlineCourseWithIdOnly = await prisma.offlineCourse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OfflineCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, OfflineCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OfflineCourse.
     * @param {OfflineCourseUpsertArgs} args - Arguments to update or create a OfflineCourse.
     * @example
     * // Update or create a OfflineCourse
     * const offlineCourse = await prisma.offlineCourse.upsert({
     *   create: {
     *     // ... data to create a OfflineCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OfflineCourse we want to update
     *   }
     * })
     */
    upsert<T extends OfflineCourseUpsertArgs>(args: SelectSubset<T, OfflineCourseUpsertArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OfflineCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseCountArgs} args - Arguments to filter OfflineCourses to count.
     * @example
     * // Count the number of OfflineCourses
     * const count = await prisma.offlineCourse.count({
     *   where: {
     *     // ... the filter for the OfflineCourses we want to count
     *   }
     * })
    **/
    count<T extends OfflineCourseCountArgs>(
      args?: Subset<T, OfflineCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfflineCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OfflineCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfflineCourseAggregateArgs>(args: Subset<T, OfflineCourseAggregateArgs>): Prisma.PrismaPromise<GetOfflineCourseAggregateType<T>>

    /**
     * Group by OfflineCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfflineCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfflineCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfflineCourseGroupByArgs['orderBy'] }
        : { orderBy?: OfflineCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfflineCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfflineCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OfflineCourse model
   */
  readonly fields: OfflineCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OfflineCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfflineCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedules<T extends OfflineCourse$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, OfflineCourse$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OfflineCourse model
   */
  interface OfflineCourseFieldRefs {
    readonly id: FieldRef<"OfflineCourse", 'Int'>
    readonly title: FieldRef<"OfflineCourse", 'String'>
    readonly description: FieldRef<"OfflineCourse", 'String'>
    readonly instructor: FieldRef<"OfflineCourse", 'String'>
    readonly category: FieldRef<"OfflineCourse", 'String'>
    readonly duration: FieldRef<"OfflineCourse", 'Int'>
    readonly imageUrl: FieldRef<"OfflineCourse", 'String'>
    readonly isActive: FieldRef<"OfflineCourse", 'Boolean'>
    readonly createdAt: FieldRef<"OfflineCourse", 'DateTime'>
    readonly updatedAt: FieldRef<"OfflineCourse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OfflineCourse findUnique
   */
  export type OfflineCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * Filter, which OfflineCourse to fetch.
     */
    where: OfflineCourseWhereUniqueInput
  }

  /**
   * OfflineCourse findUniqueOrThrow
   */
  export type OfflineCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * Filter, which OfflineCourse to fetch.
     */
    where: OfflineCourseWhereUniqueInput
  }

  /**
   * OfflineCourse findFirst
   */
  export type OfflineCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * Filter, which OfflineCourse to fetch.
     */
    where?: OfflineCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfflineCourses to fetch.
     */
    orderBy?: OfflineCourseOrderByWithRelationInput | OfflineCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OfflineCourses.
     */
    cursor?: OfflineCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfflineCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfflineCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OfflineCourses.
     */
    distinct?: OfflineCourseScalarFieldEnum | OfflineCourseScalarFieldEnum[]
  }

  /**
   * OfflineCourse findFirstOrThrow
   */
  export type OfflineCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * Filter, which OfflineCourse to fetch.
     */
    where?: OfflineCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfflineCourses to fetch.
     */
    orderBy?: OfflineCourseOrderByWithRelationInput | OfflineCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OfflineCourses.
     */
    cursor?: OfflineCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfflineCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfflineCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OfflineCourses.
     */
    distinct?: OfflineCourseScalarFieldEnum | OfflineCourseScalarFieldEnum[]
  }

  /**
   * OfflineCourse findMany
   */
  export type OfflineCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * Filter, which OfflineCourses to fetch.
     */
    where?: OfflineCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfflineCourses to fetch.
     */
    orderBy?: OfflineCourseOrderByWithRelationInput | OfflineCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OfflineCourses.
     */
    cursor?: OfflineCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfflineCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfflineCourses.
     */
    skip?: number
    distinct?: OfflineCourseScalarFieldEnum | OfflineCourseScalarFieldEnum[]
  }

  /**
   * OfflineCourse create
   */
  export type OfflineCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a OfflineCourse.
     */
    data: XOR<OfflineCourseCreateInput, OfflineCourseUncheckedCreateInput>
  }

  /**
   * OfflineCourse createMany
   */
  export type OfflineCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OfflineCourses.
     */
    data: OfflineCourseCreateManyInput | OfflineCourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OfflineCourse createManyAndReturn
   */
  export type OfflineCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * The data used to create many OfflineCourses.
     */
    data: OfflineCourseCreateManyInput | OfflineCourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OfflineCourse update
   */
  export type OfflineCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a OfflineCourse.
     */
    data: XOR<OfflineCourseUpdateInput, OfflineCourseUncheckedUpdateInput>
    /**
     * Choose, which OfflineCourse to update.
     */
    where: OfflineCourseWhereUniqueInput
  }

  /**
   * OfflineCourse updateMany
   */
  export type OfflineCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OfflineCourses.
     */
    data: XOR<OfflineCourseUpdateManyMutationInput, OfflineCourseUncheckedUpdateManyInput>
    /**
     * Filter which OfflineCourses to update
     */
    where?: OfflineCourseWhereInput
    /**
     * Limit how many OfflineCourses to update.
     */
    limit?: number
  }

  /**
   * OfflineCourse updateManyAndReturn
   */
  export type OfflineCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * The data used to update OfflineCourses.
     */
    data: XOR<OfflineCourseUpdateManyMutationInput, OfflineCourseUncheckedUpdateManyInput>
    /**
     * Filter which OfflineCourses to update
     */
    where?: OfflineCourseWhereInput
    /**
     * Limit how many OfflineCourses to update.
     */
    limit?: number
  }

  /**
   * OfflineCourse upsert
   */
  export type OfflineCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the OfflineCourse to update in case it exists.
     */
    where: OfflineCourseWhereUniqueInput
    /**
     * In case the OfflineCourse found by the `where` argument doesn't exist, create a new OfflineCourse with this data.
     */
    create: XOR<OfflineCourseCreateInput, OfflineCourseUncheckedCreateInput>
    /**
     * In case the OfflineCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfflineCourseUpdateInput, OfflineCourseUncheckedUpdateInput>
  }

  /**
   * OfflineCourse delete
   */
  export type OfflineCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
    /**
     * Filter which OfflineCourse to delete.
     */
    where: OfflineCourseWhereUniqueInput
  }

  /**
   * OfflineCourse deleteMany
   */
  export type OfflineCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OfflineCourses to delete
     */
    where?: OfflineCourseWhereInput
    /**
     * Limit how many OfflineCourses to delete.
     */
    limit?: number
  }

  /**
   * OfflineCourse.schedules
   */
  export type OfflineCourse$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    where?: CourseScheduleWhereInput
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    cursor?: CourseScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * OfflineCourse without action
   */
  export type OfflineCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfflineCourse
     */
    select?: OfflineCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfflineCourse
     */
    omit?: OfflineCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfflineCourseInclude<ExtArgs> | null
  }


  /**
   * Model CourseSchedule
   */

  export type AggregateCourseSchedule = {
    _count: CourseScheduleCountAggregateOutputType | null
    _avg: CourseScheduleAvgAggregateOutputType | null
    _sum: CourseScheduleSumAggregateOutputType | null
    _min: CourseScheduleMinAggregateOutputType | null
    _max: CourseScheduleMaxAggregateOutputType | null
  }

  export type CourseScheduleAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    capacity: number | null
    bookedSlots: number | null
    feeInQiancaiDou: number | null
  }

  export type CourseScheduleSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    capacity: number | null
    bookedSlots: number | null
    feeInQiancaiDou: number | null
  }

  export type CourseScheduleMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    startTime: Date | null
    endTime: Date | null
    location: string | null
    capacity: number | null
    bookedSlots: number | null
    feeInQiancaiDou: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CourseScheduleMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    startTime: Date | null
    endTime: Date | null
    location: string | null
    capacity: number | null
    bookedSlots: number | null
    feeInQiancaiDou: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CourseScheduleCountAggregateOutputType = {
    id: number
    courseId: number
    startTime: number
    endTime: number
    location: number
    capacity: number
    bookedSlots: number
    feeInQiancaiDou: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type CourseScheduleAvgAggregateInputType = {
    id?: true
    courseId?: true
    capacity?: true
    bookedSlots?: true
    feeInQiancaiDou?: true
  }

  export type CourseScheduleSumAggregateInputType = {
    id?: true
    courseId?: true
    capacity?: true
    bookedSlots?: true
    feeInQiancaiDou?: true
  }

  export type CourseScheduleMinAggregateInputType = {
    id?: true
    courseId?: true
    startTime?: true
    endTime?: true
    location?: true
    capacity?: true
    bookedSlots?: true
    feeInQiancaiDou?: true
    isActive?: true
    createdAt?: true
  }

  export type CourseScheduleMaxAggregateInputType = {
    id?: true
    courseId?: true
    startTime?: true
    endTime?: true
    location?: true
    capacity?: true
    bookedSlots?: true
    feeInQiancaiDou?: true
    isActive?: true
    createdAt?: true
  }

  export type CourseScheduleCountAggregateInputType = {
    id?: true
    courseId?: true
    startTime?: true
    endTime?: true
    location?: true
    capacity?: true
    bookedSlots?: true
    feeInQiancaiDou?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type CourseScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseSchedule to aggregate.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseSchedules
    **/
    _count?: true | CourseScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseScheduleMaxAggregateInputType
  }

  export type GetCourseScheduleAggregateType<T extends CourseScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseSchedule[P]>
      : GetScalarType<T[P], AggregateCourseSchedule[P]>
  }




  export type CourseScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseScheduleWhereInput
    orderBy?: CourseScheduleOrderByWithAggregationInput | CourseScheduleOrderByWithAggregationInput[]
    by: CourseScheduleScalarFieldEnum[] | CourseScheduleScalarFieldEnum
    having?: CourseScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseScheduleCountAggregateInputType | true
    _avg?: CourseScheduleAvgAggregateInputType
    _sum?: CourseScheduleSumAggregateInputType
    _min?: CourseScheduleMinAggregateInputType
    _max?: CourseScheduleMaxAggregateInputType
  }

  export type CourseScheduleGroupByOutputType = {
    id: number
    courseId: number
    startTime: Date
    endTime: Date
    location: string | null
    capacity: number
    bookedSlots: number
    feeInQiancaiDou: number
    isActive: boolean
    createdAt: Date
    _count: CourseScheduleCountAggregateOutputType | null
    _avg: CourseScheduleAvgAggregateOutputType | null
    _sum: CourseScheduleSumAggregateOutputType | null
    _min: CourseScheduleMinAggregateOutputType | null
    _max: CourseScheduleMaxAggregateOutputType | null
  }

  type GetCourseScheduleGroupByPayload<T extends CourseScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], CourseScheduleGroupByOutputType[P]>
        }
      >
    >


  export type CourseScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    capacity?: boolean
    bookedSlots?: boolean
    feeInQiancaiDou?: boolean
    isActive?: boolean
    createdAt?: boolean
    course?: boolean | OfflineCourseDefaultArgs<ExtArgs>
    appointments?: boolean | CourseSchedule$appointmentsArgs<ExtArgs>
    _count?: boolean | CourseScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseSchedule"]>

  export type CourseScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    capacity?: boolean
    bookedSlots?: boolean
    feeInQiancaiDou?: boolean
    isActive?: boolean
    createdAt?: boolean
    course?: boolean | OfflineCourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseSchedule"]>

  export type CourseScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    capacity?: boolean
    bookedSlots?: boolean
    feeInQiancaiDou?: boolean
    isActive?: boolean
    createdAt?: boolean
    course?: boolean | OfflineCourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseSchedule"]>

  export type CourseScheduleSelectScalar = {
    id?: boolean
    courseId?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    capacity?: boolean
    bookedSlots?: boolean
    feeInQiancaiDou?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type CourseScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "startTime" | "endTime" | "location" | "capacity" | "bookedSlots" | "feeInQiancaiDou" | "isActive" | "createdAt", ExtArgs["result"]["courseSchedule"]>
  export type CourseScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | OfflineCourseDefaultArgs<ExtArgs>
    appointments?: boolean | CourseSchedule$appointmentsArgs<ExtArgs>
    _count?: boolean | CourseScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | OfflineCourseDefaultArgs<ExtArgs>
  }
  export type CourseScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | OfflineCourseDefaultArgs<ExtArgs>
  }

  export type $CourseSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseSchedule"
    objects: {
      course: Prisma.$OfflineCoursePayload<ExtArgs>
      appointments: Prisma.$UserAppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      startTime: Date
      endTime: Date
      location: string | null
      capacity: number
      bookedSlots: number
      feeInQiancaiDou: number
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["courseSchedule"]>
    composites: {}
  }

  type CourseScheduleGetPayload<S extends boolean | null | undefined | CourseScheduleDefaultArgs> = $Result.GetResult<Prisma.$CourseSchedulePayload, S>

  type CourseScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseScheduleCountAggregateInputType | true
    }

  export interface CourseScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseSchedule'], meta: { name: 'CourseSchedule' } }
    /**
     * Find zero or one CourseSchedule that matches the filter.
     * @param {CourseScheduleFindUniqueArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseScheduleFindUniqueArgs>(args: SelectSubset<T, CourseScheduleFindUniqueArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseScheduleFindUniqueOrThrowArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleFindFirstArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseScheduleFindFirstArgs>(args?: SelectSubset<T, CourseScheduleFindFirstArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleFindFirstOrThrowArgs} args - Arguments to find a CourseSchedule
     * @example
     * // Get one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseSchedules
     * const courseSchedules = await prisma.courseSchedule.findMany()
     * 
     * // Get first 10 CourseSchedules
     * const courseSchedules = await prisma.courseSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseScheduleWithIdOnly = await prisma.courseSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseScheduleFindManyArgs>(args?: SelectSubset<T, CourseScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseSchedule.
     * @param {CourseScheduleCreateArgs} args - Arguments to create a CourseSchedule.
     * @example
     * // Create one CourseSchedule
     * const CourseSchedule = await prisma.courseSchedule.create({
     *   data: {
     *     // ... data to create a CourseSchedule
     *   }
     * })
     * 
     */
    create<T extends CourseScheduleCreateArgs>(args: SelectSubset<T, CourseScheduleCreateArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseSchedules.
     * @param {CourseScheduleCreateManyArgs} args - Arguments to create many CourseSchedules.
     * @example
     * // Create many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseScheduleCreateManyArgs>(args?: SelectSubset<T, CourseScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseSchedules and returns the data saved in the database.
     * @param {CourseScheduleCreateManyAndReturnArgs} args - Arguments to create many CourseSchedules.
     * @example
     * // Create many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseSchedules and only return the `id`
     * const courseScheduleWithIdOnly = await prisma.courseSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseSchedule.
     * @param {CourseScheduleDeleteArgs} args - Arguments to delete one CourseSchedule.
     * @example
     * // Delete one CourseSchedule
     * const CourseSchedule = await prisma.courseSchedule.delete({
     *   where: {
     *     // ... filter to delete one CourseSchedule
     *   }
     * })
     * 
     */
    delete<T extends CourseScheduleDeleteArgs>(args: SelectSubset<T, CourseScheduleDeleteArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseSchedule.
     * @param {CourseScheduleUpdateArgs} args - Arguments to update one CourseSchedule.
     * @example
     * // Update one CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseScheduleUpdateArgs>(args: SelectSubset<T, CourseScheduleUpdateArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseSchedules.
     * @param {CourseScheduleDeleteManyArgs} args - Arguments to filter CourseSchedules to delete.
     * @example
     * // Delete a few CourseSchedules
     * const { count } = await prisma.courseSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseScheduleDeleteManyArgs>(args?: SelectSubset<T, CourseScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseScheduleUpdateManyArgs>(args: SelectSubset<T, CourseScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseSchedules and returns the data updated in the database.
     * @param {CourseScheduleUpdateManyAndReturnArgs} args - Arguments to update many CourseSchedules.
     * @example
     * // Update many CourseSchedules
     * const courseSchedule = await prisma.courseSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseSchedules and only return the `id`
     * const courseScheduleWithIdOnly = await prisma.courseSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseSchedule.
     * @param {CourseScheduleUpsertArgs} args - Arguments to update or create a CourseSchedule.
     * @example
     * // Update or create a CourseSchedule
     * const courseSchedule = await prisma.courseSchedule.upsert({
     *   create: {
     *     // ... data to create a CourseSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseSchedule we want to update
     *   }
     * })
     */
    upsert<T extends CourseScheduleUpsertArgs>(args: SelectSubset<T, CourseScheduleUpsertArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleCountArgs} args - Arguments to filter CourseSchedules to count.
     * @example
     * // Count the number of CourseSchedules
     * const count = await prisma.courseSchedule.count({
     *   where: {
     *     // ... the filter for the CourseSchedules we want to count
     *   }
     * })
    **/
    count<T extends CourseScheduleCountArgs>(
      args?: Subset<T, CourseScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseScheduleAggregateArgs>(args: Subset<T, CourseScheduleAggregateArgs>): Prisma.PrismaPromise<GetCourseScheduleAggregateType<T>>

    /**
     * Group by CourseSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseScheduleGroupByArgs['orderBy'] }
        : { orderBy?: CourseScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseSchedule model
   */
  readonly fields: CourseScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends OfflineCourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OfflineCourseDefaultArgs<ExtArgs>>): Prisma__OfflineCourseClient<$Result.GetResult<Prisma.$OfflineCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointments<T extends CourseSchedule$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, CourseSchedule$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseSchedule model
   */
  interface CourseScheduleFieldRefs {
    readonly id: FieldRef<"CourseSchedule", 'Int'>
    readonly courseId: FieldRef<"CourseSchedule", 'Int'>
    readonly startTime: FieldRef<"CourseSchedule", 'DateTime'>
    readonly endTime: FieldRef<"CourseSchedule", 'DateTime'>
    readonly location: FieldRef<"CourseSchedule", 'String'>
    readonly capacity: FieldRef<"CourseSchedule", 'Int'>
    readonly bookedSlots: FieldRef<"CourseSchedule", 'Int'>
    readonly feeInQiancaiDou: FieldRef<"CourseSchedule", 'Int'>
    readonly isActive: FieldRef<"CourseSchedule", 'Boolean'>
    readonly createdAt: FieldRef<"CourseSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseSchedule findUnique
   */
  export type CourseScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule findUniqueOrThrow
   */
  export type CourseScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule findFirst
   */
  export type CourseScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseSchedules.
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseSchedules.
     */
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * CourseSchedule findFirstOrThrow
   */
  export type CourseScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedule to fetch.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseSchedules.
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseSchedules.
     */
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * CourseSchedule findMany
   */
  export type CourseScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter, which CourseSchedules to fetch.
     */
    where?: CourseScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSchedules to fetch.
     */
    orderBy?: CourseScheduleOrderByWithRelationInput | CourseScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseSchedules.
     */
    cursor?: CourseScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSchedules.
     */
    skip?: number
    distinct?: CourseScheduleScalarFieldEnum | CourseScheduleScalarFieldEnum[]
  }

  /**
   * CourseSchedule create
   */
  export type CourseScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseSchedule.
     */
    data: XOR<CourseScheduleCreateInput, CourseScheduleUncheckedCreateInput>
  }

  /**
   * CourseSchedule createMany
   */
  export type CourseScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseSchedules.
     */
    data: CourseScheduleCreateManyInput | CourseScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseSchedule createManyAndReturn
   */
  export type CourseScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many CourseSchedules.
     */
    data: CourseScheduleCreateManyInput | CourseScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseSchedule update
   */
  export type CourseScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseSchedule.
     */
    data: XOR<CourseScheduleUpdateInput, CourseScheduleUncheckedUpdateInput>
    /**
     * Choose, which CourseSchedule to update.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule updateMany
   */
  export type CourseScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseSchedules.
     */
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyInput>
    /**
     * Filter which CourseSchedules to update
     */
    where?: CourseScheduleWhereInput
    /**
     * Limit how many CourseSchedules to update.
     */
    limit?: number
  }

  /**
   * CourseSchedule updateManyAndReturn
   */
  export type CourseScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * The data used to update CourseSchedules.
     */
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyInput>
    /**
     * Filter which CourseSchedules to update
     */
    where?: CourseScheduleWhereInput
    /**
     * Limit how many CourseSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseSchedule upsert
   */
  export type CourseScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseSchedule to update in case it exists.
     */
    where: CourseScheduleWhereUniqueInput
    /**
     * In case the CourseSchedule found by the `where` argument doesn't exist, create a new CourseSchedule with this data.
     */
    create: XOR<CourseScheduleCreateInput, CourseScheduleUncheckedCreateInput>
    /**
     * In case the CourseSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseScheduleUpdateInput, CourseScheduleUncheckedUpdateInput>
  }

  /**
   * CourseSchedule delete
   */
  export type CourseScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
    /**
     * Filter which CourseSchedule to delete.
     */
    where: CourseScheduleWhereUniqueInput
  }

  /**
   * CourseSchedule deleteMany
   */
  export type CourseScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseSchedules to delete
     */
    where?: CourseScheduleWhereInput
    /**
     * Limit how many CourseSchedules to delete.
     */
    limit?: number
  }

  /**
   * CourseSchedule.appointments
   */
  export type CourseSchedule$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    where?: UserAppointmentWhereInput
    orderBy?: UserAppointmentOrderByWithRelationInput | UserAppointmentOrderByWithRelationInput[]
    cursor?: UserAppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAppointmentScalarFieldEnum | UserAppointmentScalarFieldEnum[]
  }

  /**
   * CourseSchedule without action
   */
  export type CourseScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseSchedule
     */
    select?: CourseScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseSchedule
     */
    omit?: CourseScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseScheduleInclude<ExtArgs> | null
  }


  /**
   * Model UserAppointment
   */

  export type AggregateUserAppointment = {
    _count: UserAppointmentCountAggregateOutputType | null
    _avg: UserAppointmentAvgAggregateOutputType | null
    _sum: UserAppointmentSumAggregateOutputType | null
    _min: UserAppointmentMinAggregateOutputType | null
    _max: UserAppointmentMaxAggregateOutputType | null
  }

  export type UserAppointmentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    scheduleId: number | null
  }

  export type UserAppointmentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    scheduleId: number | null
  }

  export type UserAppointmentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    scheduleId: number | null
    status: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAppointmentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    scheduleId: number | null
    status: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAppointmentCountAggregateOutputType = {
    id: number
    userId: number
    scheduleId: number
    status: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAppointmentAvgAggregateInputType = {
    id?: true
    userId?: true
    scheduleId?: true
  }

  export type UserAppointmentSumAggregateInputType = {
    id?: true
    userId?: true
    scheduleId?: true
  }

  export type UserAppointmentMinAggregateInputType = {
    id?: true
    userId?: true
    scheduleId?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAppointmentMaxAggregateInputType = {
    id?: true
    userId?: true
    scheduleId?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAppointmentCountAggregateInputType = {
    id?: true
    userId?: true
    scheduleId?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAppointment to aggregate.
     */
    where?: UserAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppointments to fetch.
     */
    orderBy?: UserAppointmentOrderByWithRelationInput | UserAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAppointments
    **/
    _count?: true | UserAppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAppointmentMaxAggregateInputType
  }

  export type GetUserAppointmentAggregateType<T extends UserAppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAppointment[P]>
      : GetScalarType<T[P], AggregateUserAppointment[P]>
  }




  export type UserAppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAppointmentWhereInput
    orderBy?: UserAppointmentOrderByWithAggregationInput | UserAppointmentOrderByWithAggregationInput[]
    by: UserAppointmentScalarFieldEnum[] | UserAppointmentScalarFieldEnum
    having?: UserAppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAppointmentCountAggregateInputType | true
    _avg?: UserAppointmentAvgAggregateInputType
    _sum?: UserAppointmentSumAggregateInputType
    _min?: UserAppointmentMinAggregateInputType
    _max?: UserAppointmentMaxAggregateInputType
  }

  export type UserAppointmentGroupByOutputType = {
    id: number
    userId: number
    scheduleId: number
    status: string
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserAppointmentCountAggregateOutputType | null
    _avg: UserAppointmentAvgAggregateOutputType | null
    _sum: UserAppointmentSumAggregateOutputType | null
    _min: UserAppointmentMinAggregateOutputType | null
    _max: UserAppointmentMaxAggregateOutputType | null
  }

  type GetUserAppointmentGroupByPayload<T extends UserAppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], UserAppointmentGroupByOutputType[P]>
        }
      >
    >


  export type UserAppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    scheduleId?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    schedule?: boolean | CourseScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAppointment"]>

  export type UserAppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    scheduleId?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    schedule?: boolean | CourseScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAppointment"]>

  export type UserAppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    scheduleId?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    schedule?: boolean | CourseScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAppointment"]>

  export type UserAppointmentSelectScalar = {
    id?: boolean
    userId?: boolean
    scheduleId?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserAppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "scheduleId" | "status" | "note" | "createdAt" | "updatedAt", ExtArgs["result"]["userAppointment"]>
  export type UserAppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    schedule?: boolean | CourseScheduleDefaultArgs<ExtArgs>
  }
  export type UserAppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    schedule?: boolean | CourseScheduleDefaultArgs<ExtArgs>
  }
  export type UserAppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    schedule?: boolean | CourseScheduleDefaultArgs<ExtArgs>
  }

  export type $UserAppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAppointment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      schedule: Prisma.$CourseSchedulePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      scheduleId: number
      status: string
      note: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userAppointment"]>
    composites: {}
  }

  type UserAppointmentGetPayload<S extends boolean | null | undefined | UserAppointmentDefaultArgs> = $Result.GetResult<Prisma.$UserAppointmentPayload, S>

  type UserAppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAppointmentCountAggregateInputType | true
    }

  export interface UserAppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAppointment'], meta: { name: 'UserAppointment' } }
    /**
     * Find zero or one UserAppointment that matches the filter.
     * @param {UserAppointmentFindUniqueArgs} args - Arguments to find a UserAppointment
     * @example
     * // Get one UserAppointment
     * const userAppointment = await prisma.userAppointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAppointmentFindUniqueArgs>(args: SelectSubset<T, UserAppointmentFindUniqueArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAppointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAppointmentFindUniqueOrThrowArgs} args - Arguments to find a UserAppointment
     * @example
     * // Get one UserAppointment
     * const userAppointment = await prisma.userAppointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAppointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentFindFirstArgs} args - Arguments to find a UserAppointment
     * @example
     * // Get one UserAppointment
     * const userAppointment = await prisma.userAppointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAppointmentFindFirstArgs>(args?: SelectSubset<T, UserAppointmentFindFirstArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAppointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentFindFirstOrThrowArgs} args - Arguments to find a UserAppointment
     * @example
     * // Get one UserAppointment
     * const userAppointment = await prisma.userAppointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAppointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAppointments
     * const userAppointments = await prisma.userAppointment.findMany()
     * 
     * // Get first 10 UserAppointments
     * const userAppointments = await prisma.userAppointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAppointmentWithIdOnly = await prisma.userAppointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAppointmentFindManyArgs>(args?: SelectSubset<T, UserAppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAppointment.
     * @param {UserAppointmentCreateArgs} args - Arguments to create a UserAppointment.
     * @example
     * // Create one UserAppointment
     * const UserAppointment = await prisma.userAppointment.create({
     *   data: {
     *     // ... data to create a UserAppointment
     *   }
     * })
     * 
     */
    create<T extends UserAppointmentCreateArgs>(args: SelectSubset<T, UserAppointmentCreateArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAppointments.
     * @param {UserAppointmentCreateManyArgs} args - Arguments to create many UserAppointments.
     * @example
     * // Create many UserAppointments
     * const userAppointment = await prisma.userAppointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAppointmentCreateManyArgs>(args?: SelectSubset<T, UserAppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAppointments and returns the data saved in the database.
     * @param {UserAppointmentCreateManyAndReturnArgs} args - Arguments to create many UserAppointments.
     * @example
     * // Create many UserAppointments
     * const userAppointment = await prisma.userAppointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAppointments and only return the `id`
     * const userAppointmentWithIdOnly = await prisma.userAppointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserAppointment.
     * @param {UserAppointmentDeleteArgs} args - Arguments to delete one UserAppointment.
     * @example
     * // Delete one UserAppointment
     * const UserAppointment = await prisma.userAppointment.delete({
     *   where: {
     *     // ... filter to delete one UserAppointment
     *   }
     * })
     * 
     */
    delete<T extends UserAppointmentDeleteArgs>(args: SelectSubset<T, UserAppointmentDeleteArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAppointment.
     * @param {UserAppointmentUpdateArgs} args - Arguments to update one UserAppointment.
     * @example
     * // Update one UserAppointment
     * const userAppointment = await prisma.userAppointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAppointmentUpdateArgs>(args: SelectSubset<T, UserAppointmentUpdateArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAppointments.
     * @param {UserAppointmentDeleteManyArgs} args - Arguments to filter UserAppointments to delete.
     * @example
     * // Delete a few UserAppointments
     * const { count } = await prisma.userAppointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAppointmentDeleteManyArgs>(args?: SelectSubset<T, UserAppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAppointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAppointments
     * const userAppointment = await prisma.userAppointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAppointmentUpdateManyArgs>(args: SelectSubset<T, UserAppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAppointments and returns the data updated in the database.
     * @param {UserAppointmentUpdateManyAndReturnArgs} args - Arguments to update many UserAppointments.
     * @example
     * // Update many UserAppointments
     * const userAppointment = await prisma.userAppointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserAppointments and only return the `id`
     * const userAppointmentWithIdOnly = await prisma.userAppointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserAppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, UserAppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserAppointment.
     * @param {UserAppointmentUpsertArgs} args - Arguments to update or create a UserAppointment.
     * @example
     * // Update or create a UserAppointment
     * const userAppointment = await prisma.userAppointment.upsert({
     *   create: {
     *     // ... data to create a UserAppointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAppointment we want to update
     *   }
     * })
     */
    upsert<T extends UserAppointmentUpsertArgs>(args: SelectSubset<T, UserAppointmentUpsertArgs<ExtArgs>>): Prisma__UserAppointmentClient<$Result.GetResult<Prisma.$UserAppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAppointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentCountArgs} args - Arguments to filter UserAppointments to count.
     * @example
     * // Count the number of UserAppointments
     * const count = await prisma.userAppointment.count({
     *   where: {
     *     // ... the filter for the UserAppointments we want to count
     *   }
     * })
    **/
    count<T extends UserAppointmentCountArgs>(
      args?: Subset<T, UserAppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAppointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAppointmentAggregateArgs>(args: Subset<T, UserAppointmentAggregateArgs>): Prisma.PrismaPromise<GetUserAppointmentAggregateType<T>>

    /**
     * Group by UserAppointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAppointmentGroupByArgs['orderBy'] }
        : { orderBy?: UserAppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAppointment model
   */
  readonly fields: UserAppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAppointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    schedule<T extends CourseScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseScheduleDefaultArgs<ExtArgs>>): Prisma__CourseScheduleClient<$Result.GetResult<Prisma.$CourseSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAppointment model
   */
  interface UserAppointmentFieldRefs {
    readonly id: FieldRef<"UserAppointment", 'Int'>
    readonly userId: FieldRef<"UserAppointment", 'Int'>
    readonly scheduleId: FieldRef<"UserAppointment", 'Int'>
    readonly status: FieldRef<"UserAppointment", 'String'>
    readonly note: FieldRef<"UserAppointment", 'String'>
    readonly createdAt: FieldRef<"UserAppointment", 'DateTime'>
    readonly updatedAt: FieldRef<"UserAppointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAppointment findUnique
   */
  export type UserAppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAppointment to fetch.
     */
    where: UserAppointmentWhereUniqueInput
  }

  /**
   * UserAppointment findUniqueOrThrow
   */
  export type UserAppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAppointment to fetch.
     */
    where: UserAppointmentWhereUniqueInput
  }

  /**
   * UserAppointment findFirst
   */
  export type UserAppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAppointment to fetch.
     */
    where?: UserAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppointments to fetch.
     */
    orderBy?: UserAppointmentOrderByWithRelationInput | UserAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAppointments.
     */
    cursor?: UserAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAppointments.
     */
    distinct?: UserAppointmentScalarFieldEnum | UserAppointmentScalarFieldEnum[]
  }

  /**
   * UserAppointment findFirstOrThrow
   */
  export type UserAppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAppointment to fetch.
     */
    where?: UserAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppointments to fetch.
     */
    orderBy?: UserAppointmentOrderByWithRelationInput | UserAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAppointments.
     */
    cursor?: UserAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAppointments.
     */
    distinct?: UserAppointmentScalarFieldEnum | UserAppointmentScalarFieldEnum[]
  }

  /**
   * UserAppointment findMany
   */
  export type UserAppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAppointments to fetch.
     */
    where?: UserAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAppointments to fetch.
     */
    orderBy?: UserAppointmentOrderByWithRelationInput | UserAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAppointments.
     */
    cursor?: UserAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAppointments.
     */
    skip?: number
    distinct?: UserAppointmentScalarFieldEnum | UserAppointmentScalarFieldEnum[]
  }

  /**
   * UserAppointment create
   */
  export type UserAppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAppointment.
     */
    data: XOR<UserAppointmentCreateInput, UserAppointmentUncheckedCreateInput>
  }

  /**
   * UserAppointment createMany
   */
  export type UserAppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAppointments.
     */
    data: UserAppointmentCreateManyInput | UserAppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAppointment createManyAndReturn
   */
  export type UserAppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many UserAppointments.
     */
    data: UserAppointmentCreateManyInput | UserAppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAppointment update
   */
  export type UserAppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAppointment.
     */
    data: XOR<UserAppointmentUpdateInput, UserAppointmentUncheckedUpdateInput>
    /**
     * Choose, which UserAppointment to update.
     */
    where: UserAppointmentWhereUniqueInput
  }

  /**
   * UserAppointment updateMany
   */
  export type UserAppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAppointments.
     */
    data: XOR<UserAppointmentUpdateManyMutationInput, UserAppointmentUncheckedUpdateManyInput>
    /**
     * Filter which UserAppointments to update
     */
    where?: UserAppointmentWhereInput
    /**
     * Limit how many UserAppointments to update.
     */
    limit?: number
  }

  /**
   * UserAppointment updateManyAndReturn
   */
  export type UserAppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * The data used to update UserAppointments.
     */
    data: XOR<UserAppointmentUpdateManyMutationInput, UserAppointmentUncheckedUpdateManyInput>
    /**
     * Filter which UserAppointments to update
     */
    where?: UserAppointmentWhereInput
    /**
     * Limit how many UserAppointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAppointment upsert
   */
  export type UserAppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAppointment to update in case it exists.
     */
    where: UserAppointmentWhereUniqueInput
    /**
     * In case the UserAppointment found by the `where` argument doesn't exist, create a new UserAppointment with this data.
     */
    create: XOR<UserAppointmentCreateInput, UserAppointmentUncheckedCreateInput>
    /**
     * In case the UserAppointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAppointmentUpdateInput, UserAppointmentUncheckedUpdateInput>
  }

  /**
   * UserAppointment delete
   */
  export type UserAppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
    /**
     * Filter which UserAppointment to delete.
     */
    where: UserAppointmentWhereUniqueInput
  }

  /**
   * UserAppointment deleteMany
   */
  export type UserAppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAppointments to delete
     */
    where?: UserAppointmentWhereInput
    /**
     * Limit how many UserAppointments to delete.
     */
    limit?: number
  }

  /**
   * UserAppointment without action
   */
  export type UserAppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAppointment
     */
    select?: UserAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAppointment
     */
    omit?: UserAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAppointmentInclude<ExtArgs> | null
  }


  /**
   * Model TravelPost
   */

  export type AggregateTravelPost = {
    _count: TravelPostCountAggregateOutputType | null
    _avg: TravelPostAvgAggregateOutputType | null
    _sum: TravelPostSumAggregateOutputType | null
    _min: TravelPostMinAggregateOutputType | null
    _max: TravelPostMaxAggregateOutputType | null
  }

  export type TravelPostAvgAggregateOutputType = {
    id: number | null
    viewCount: number | null
  }

  export type TravelPostSumAggregateOutputType = {
    id: number | null
    viewCount: number | null
  }

  export type TravelPostMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    summary: string | null
    category: string | null
    imageUrl: string | null
    author: string | null
    isPublished: boolean | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TravelPostMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    summary: string | null
    category: string | null
    imageUrl: string | null
    author: string | null
    isPublished: boolean | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TravelPostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    summary: number
    category: number
    tags: number
    imageUrl: number
    images: number
    author: number
    isPublished: number
    viewCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TravelPostAvgAggregateInputType = {
    id?: true
    viewCount?: true
  }

  export type TravelPostSumAggregateInputType = {
    id?: true
    viewCount?: true
  }

  export type TravelPostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    summary?: true
    category?: true
    imageUrl?: true
    author?: true
    isPublished?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TravelPostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    summary?: true
    category?: true
    imageUrl?: true
    author?: true
    isPublished?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TravelPostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    summary?: true
    category?: true
    tags?: true
    imageUrl?: true
    images?: true
    author?: true
    isPublished?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TravelPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelPost to aggregate.
     */
    where?: TravelPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPosts to fetch.
     */
    orderBy?: TravelPostOrderByWithRelationInput | TravelPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TravelPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TravelPosts
    **/
    _count?: true | TravelPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TravelPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TravelPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TravelPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TravelPostMaxAggregateInputType
  }

  export type GetTravelPostAggregateType<T extends TravelPostAggregateArgs> = {
        [P in keyof T & keyof AggregateTravelPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTravelPost[P]>
      : GetScalarType<T[P], AggregateTravelPost[P]>
  }




  export type TravelPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelPostWhereInput
    orderBy?: TravelPostOrderByWithAggregationInput | TravelPostOrderByWithAggregationInput[]
    by: TravelPostScalarFieldEnum[] | TravelPostScalarFieldEnum
    having?: TravelPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TravelPostCountAggregateInputType | true
    _avg?: TravelPostAvgAggregateInputType
    _sum?: TravelPostSumAggregateInputType
    _min?: TravelPostMinAggregateInputType
    _max?: TravelPostMaxAggregateInputType
  }

  export type TravelPostGroupByOutputType = {
    id: number
    title: string
    content: string
    summary: string | null
    category: string
    tags: string[]
    imageUrl: string | null
    images: string[]
    author: string | null
    isPublished: boolean
    viewCount: number
    createdAt: Date
    updatedAt: Date
    _count: TravelPostCountAggregateOutputType | null
    _avg: TravelPostAvgAggregateOutputType | null
    _sum: TravelPostSumAggregateOutputType | null
    _min: TravelPostMinAggregateOutputType | null
    _max: TravelPostMaxAggregateOutputType | null
  }

  type GetTravelPostGroupByPayload<T extends TravelPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TravelPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TravelPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TravelPostGroupByOutputType[P]>
            : GetScalarType<T[P], TravelPostGroupByOutputType[P]>
        }
      >
    >


  export type TravelPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    images?: boolean
    author?: boolean
    isPublished?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["travelPost"]>

  export type TravelPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    images?: boolean
    author?: boolean
    isPublished?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["travelPost"]>

  export type TravelPostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    images?: boolean
    author?: boolean
    isPublished?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["travelPost"]>

  export type TravelPostSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    summary?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    images?: boolean
    author?: boolean
    isPublished?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TravelPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "summary" | "category" | "tags" | "imageUrl" | "images" | "author" | "isPublished" | "viewCount" | "createdAt" | "updatedAt", ExtArgs["result"]["travelPost"]>

  export type $TravelPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TravelPost"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      summary: string | null
      category: string
      tags: string[]
      imageUrl: string | null
      images: string[]
      author: string | null
      isPublished: boolean
      viewCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["travelPost"]>
    composites: {}
  }

  type TravelPostGetPayload<S extends boolean | null | undefined | TravelPostDefaultArgs> = $Result.GetResult<Prisma.$TravelPostPayload, S>

  type TravelPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TravelPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TravelPostCountAggregateInputType | true
    }

  export interface TravelPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TravelPost'], meta: { name: 'TravelPost' } }
    /**
     * Find zero or one TravelPost that matches the filter.
     * @param {TravelPostFindUniqueArgs} args - Arguments to find a TravelPost
     * @example
     * // Get one TravelPost
     * const travelPost = await prisma.travelPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TravelPostFindUniqueArgs>(args: SelectSubset<T, TravelPostFindUniqueArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TravelPost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TravelPostFindUniqueOrThrowArgs} args - Arguments to find a TravelPost
     * @example
     * // Get one TravelPost
     * const travelPost = await prisma.travelPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TravelPostFindUniqueOrThrowArgs>(args: SelectSubset<T, TravelPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TravelPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostFindFirstArgs} args - Arguments to find a TravelPost
     * @example
     * // Get one TravelPost
     * const travelPost = await prisma.travelPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TravelPostFindFirstArgs>(args?: SelectSubset<T, TravelPostFindFirstArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TravelPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostFindFirstOrThrowArgs} args - Arguments to find a TravelPost
     * @example
     * // Get one TravelPost
     * const travelPost = await prisma.travelPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TravelPostFindFirstOrThrowArgs>(args?: SelectSubset<T, TravelPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TravelPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TravelPosts
     * const travelPosts = await prisma.travelPost.findMany()
     * 
     * // Get first 10 TravelPosts
     * const travelPosts = await prisma.travelPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const travelPostWithIdOnly = await prisma.travelPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TravelPostFindManyArgs>(args?: SelectSubset<T, TravelPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TravelPost.
     * @param {TravelPostCreateArgs} args - Arguments to create a TravelPost.
     * @example
     * // Create one TravelPost
     * const TravelPost = await prisma.travelPost.create({
     *   data: {
     *     // ... data to create a TravelPost
     *   }
     * })
     * 
     */
    create<T extends TravelPostCreateArgs>(args: SelectSubset<T, TravelPostCreateArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TravelPosts.
     * @param {TravelPostCreateManyArgs} args - Arguments to create many TravelPosts.
     * @example
     * // Create many TravelPosts
     * const travelPost = await prisma.travelPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TravelPostCreateManyArgs>(args?: SelectSubset<T, TravelPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TravelPosts and returns the data saved in the database.
     * @param {TravelPostCreateManyAndReturnArgs} args - Arguments to create many TravelPosts.
     * @example
     * // Create many TravelPosts
     * const travelPost = await prisma.travelPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TravelPosts and only return the `id`
     * const travelPostWithIdOnly = await prisma.travelPost.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TravelPostCreateManyAndReturnArgs>(args?: SelectSubset<T, TravelPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TravelPost.
     * @param {TravelPostDeleteArgs} args - Arguments to delete one TravelPost.
     * @example
     * // Delete one TravelPost
     * const TravelPost = await prisma.travelPost.delete({
     *   where: {
     *     // ... filter to delete one TravelPost
     *   }
     * })
     * 
     */
    delete<T extends TravelPostDeleteArgs>(args: SelectSubset<T, TravelPostDeleteArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TravelPost.
     * @param {TravelPostUpdateArgs} args - Arguments to update one TravelPost.
     * @example
     * // Update one TravelPost
     * const travelPost = await prisma.travelPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TravelPostUpdateArgs>(args: SelectSubset<T, TravelPostUpdateArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TravelPosts.
     * @param {TravelPostDeleteManyArgs} args - Arguments to filter TravelPosts to delete.
     * @example
     * // Delete a few TravelPosts
     * const { count } = await prisma.travelPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TravelPostDeleteManyArgs>(args?: SelectSubset<T, TravelPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TravelPosts
     * const travelPost = await prisma.travelPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TravelPostUpdateManyArgs>(args: SelectSubset<T, TravelPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelPosts and returns the data updated in the database.
     * @param {TravelPostUpdateManyAndReturnArgs} args - Arguments to update many TravelPosts.
     * @example
     * // Update many TravelPosts
     * const travelPost = await prisma.travelPost.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TravelPosts and only return the `id`
     * const travelPostWithIdOnly = await prisma.travelPost.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TravelPostUpdateManyAndReturnArgs>(args: SelectSubset<T, TravelPostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TravelPost.
     * @param {TravelPostUpsertArgs} args - Arguments to update or create a TravelPost.
     * @example
     * // Update or create a TravelPost
     * const travelPost = await prisma.travelPost.upsert({
     *   create: {
     *     // ... data to create a TravelPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TravelPost we want to update
     *   }
     * })
     */
    upsert<T extends TravelPostUpsertArgs>(args: SelectSubset<T, TravelPostUpsertArgs<ExtArgs>>): Prisma__TravelPostClient<$Result.GetResult<Prisma.$TravelPostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TravelPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostCountArgs} args - Arguments to filter TravelPosts to count.
     * @example
     * // Count the number of TravelPosts
     * const count = await prisma.travelPost.count({
     *   where: {
     *     // ... the filter for the TravelPosts we want to count
     *   }
     * })
    **/
    count<T extends TravelPostCountArgs>(
      args?: Subset<T, TravelPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TravelPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TravelPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TravelPostAggregateArgs>(args: Subset<T, TravelPostAggregateArgs>): Prisma.PrismaPromise<GetTravelPostAggregateType<T>>

    /**
     * Group by TravelPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TravelPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TravelPostGroupByArgs['orderBy'] }
        : { orderBy?: TravelPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TravelPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTravelPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TravelPost model
   */
  readonly fields: TravelPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TravelPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TravelPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TravelPost model
   */
  interface TravelPostFieldRefs {
    readonly id: FieldRef<"TravelPost", 'Int'>
    readonly title: FieldRef<"TravelPost", 'String'>
    readonly content: FieldRef<"TravelPost", 'String'>
    readonly summary: FieldRef<"TravelPost", 'String'>
    readonly category: FieldRef<"TravelPost", 'String'>
    readonly tags: FieldRef<"TravelPost", 'String[]'>
    readonly imageUrl: FieldRef<"TravelPost", 'String'>
    readonly images: FieldRef<"TravelPost", 'String[]'>
    readonly author: FieldRef<"TravelPost", 'String'>
    readonly isPublished: FieldRef<"TravelPost", 'Boolean'>
    readonly viewCount: FieldRef<"TravelPost", 'Int'>
    readonly createdAt: FieldRef<"TravelPost", 'DateTime'>
    readonly updatedAt: FieldRef<"TravelPost", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TravelPost findUnique
   */
  export type TravelPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * Filter, which TravelPost to fetch.
     */
    where: TravelPostWhereUniqueInput
  }

  /**
   * TravelPost findUniqueOrThrow
   */
  export type TravelPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * Filter, which TravelPost to fetch.
     */
    where: TravelPostWhereUniqueInput
  }

  /**
   * TravelPost findFirst
   */
  export type TravelPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * Filter, which TravelPost to fetch.
     */
    where?: TravelPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPosts to fetch.
     */
    orderBy?: TravelPostOrderByWithRelationInput | TravelPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelPosts.
     */
    cursor?: TravelPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelPosts.
     */
    distinct?: TravelPostScalarFieldEnum | TravelPostScalarFieldEnum[]
  }

  /**
   * TravelPost findFirstOrThrow
   */
  export type TravelPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * Filter, which TravelPost to fetch.
     */
    where?: TravelPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPosts to fetch.
     */
    orderBy?: TravelPostOrderByWithRelationInput | TravelPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelPosts.
     */
    cursor?: TravelPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelPosts.
     */
    distinct?: TravelPostScalarFieldEnum | TravelPostScalarFieldEnum[]
  }

  /**
   * TravelPost findMany
   */
  export type TravelPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * Filter, which TravelPosts to fetch.
     */
    where?: TravelPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelPosts to fetch.
     */
    orderBy?: TravelPostOrderByWithRelationInput | TravelPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TravelPosts.
     */
    cursor?: TravelPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelPosts.
     */
    skip?: number
    distinct?: TravelPostScalarFieldEnum | TravelPostScalarFieldEnum[]
  }

  /**
   * TravelPost create
   */
  export type TravelPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * The data needed to create a TravelPost.
     */
    data: XOR<TravelPostCreateInput, TravelPostUncheckedCreateInput>
  }

  /**
   * TravelPost createMany
   */
  export type TravelPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TravelPosts.
     */
    data: TravelPostCreateManyInput | TravelPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TravelPost createManyAndReturn
   */
  export type TravelPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * The data used to create many TravelPosts.
     */
    data: TravelPostCreateManyInput | TravelPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TravelPost update
   */
  export type TravelPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * The data needed to update a TravelPost.
     */
    data: XOR<TravelPostUpdateInput, TravelPostUncheckedUpdateInput>
    /**
     * Choose, which TravelPost to update.
     */
    where: TravelPostWhereUniqueInput
  }

  /**
   * TravelPost updateMany
   */
  export type TravelPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TravelPosts.
     */
    data: XOR<TravelPostUpdateManyMutationInput, TravelPostUncheckedUpdateManyInput>
    /**
     * Filter which TravelPosts to update
     */
    where?: TravelPostWhereInput
    /**
     * Limit how many TravelPosts to update.
     */
    limit?: number
  }

  /**
   * TravelPost updateManyAndReturn
   */
  export type TravelPostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * The data used to update TravelPosts.
     */
    data: XOR<TravelPostUpdateManyMutationInput, TravelPostUncheckedUpdateManyInput>
    /**
     * Filter which TravelPosts to update
     */
    where?: TravelPostWhereInput
    /**
     * Limit how many TravelPosts to update.
     */
    limit?: number
  }

  /**
   * TravelPost upsert
   */
  export type TravelPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * The filter to search for the TravelPost to update in case it exists.
     */
    where: TravelPostWhereUniqueInput
    /**
     * In case the TravelPost found by the `where` argument doesn't exist, create a new TravelPost with this data.
     */
    create: XOR<TravelPostCreateInput, TravelPostUncheckedCreateInput>
    /**
     * In case the TravelPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TravelPostUpdateInput, TravelPostUncheckedUpdateInput>
  }

  /**
   * TravelPost delete
   */
  export type TravelPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
    /**
     * Filter which TravelPost to delete.
     */
    where: TravelPostWhereUniqueInput
  }

  /**
   * TravelPost deleteMany
   */
  export type TravelPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelPosts to delete
     */
    where?: TravelPostWhereInput
    /**
     * Limit how many TravelPosts to delete.
     */
    limit?: number
  }

  /**
   * TravelPost without action
   */
  export type TravelPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelPost
     */
    select?: TravelPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelPost
     */
    omit?: TravelPostOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    qiancaiDouBalance: 'qiancaiDouBalance',
    firstName: 'firstName',
    lastName: 'lastName',
    avatarUrl: 'avatarUrl',
    language: 'language',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const QiancaiDouTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    newBalance: 'newBalance',
    reason: 'reason',
    description: 'description',
    refTable: 'refTable',
    refId: 'refId',
    createdAt: 'createdAt'
  };

  export type QiancaiDouTransactionScalarFieldEnum = (typeof QiancaiDouTransactionScalarFieldEnum)[keyof typeof QiancaiDouTransactionScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    images: 'images',
    priceInQiancaiDou: 'priceInQiancaiDou',
    stock: 'stock',
    category: 'category',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalCost: 'totalCost',
    status: 'status',
    shippingAddress: 'shippingAddress',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const OfflineCourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    instructor: 'instructor',
    category: 'category',
    duration: 'duration',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OfflineCourseScalarFieldEnum = (typeof OfflineCourseScalarFieldEnum)[keyof typeof OfflineCourseScalarFieldEnum]


  export const CourseScheduleScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    startTime: 'startTime',
    endTime: 'endTime',
    location: 'location',
    capacity: 'capacity',
    bookedSlots: 'bookedSlots',
    feeInQiancaiDou: 'feeInQiancaiDou',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type CourseScheduleScalarFieldEnum = (typeof CourseScheduleScalarFieldEnum)[keyof typeof CourseScheduleScalarFieldEnum]


  export const UserAppointmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    scheduleId: 'scheduleId',
    status: 'status',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserAppointmentScalarFieldEnum = (typeof UserAppointmentScalarFieldEnum)[keyof typeof UserAppointmentScalarFieldEnum]


  export const TravelPostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    summary: 'summary',
    category: 'category',
    tags: 'tags',
    imageUrl: 'imageUrl',
    images: 'images',
    author: 'author',
    isPublished: 'isPublished',
    viewCount: 'viewCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TravelPostScalarFieldEnum = (typeof TravelPostScalarFieldEnum)[keyof typeof TravelPostScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    qiancaiDouBalance?: IntFilter<"User"> | number
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionListRelationFilter
    orders?: OrderListRelationFilter
    appointments?: UserAppointmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    qiancaiDouBalance?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qiancaiDouTransactions?: QiancaiDouTransactionOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    appointments?: UserAppointmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    qiancaiDouBalance?: IntFilter<"User"> | number
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionListRelationFilter
    orders?: OrderListRelationFilter
    appointments?: UserAppointmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    qiancaiDouBalance?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    qiancaiDouBalance?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    language?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type QiancaiDouTransactionWhereInput = {
    AND?: QiancaiDouTransactionWhereInput | QiancaiDouTransactionWhereInput[]
    OR?: QiancaiDouTransactionWhereInput[]
    NOT?: QiancaiDouTransactionWhereInput | QiancaiDouTransactionWhereInput[]
    id?: IntFilter<"QiancaiDouTransaction"> | number
    userId?: IntFilter<"QiancaiDouTransaction"> | number
    amount?: IntFilter<"QiancaiDouTransaction"> | number
    newBalance?: IntFilter<"QiancaiDouTransaction"> | number
    reason?: StringFilter<"QiancaiDouTransaction"> | string
    description?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    refTable?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    refId?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    createdAt?: DateTimeFilter<"QiancaiDouTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type QiancaiDouTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    refTable?: SortOrderInput | SortOrder
    refId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type QiancaiDouTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QiancaiDouTransactionWhereInput | QiancaiDouTransactionWhereInput[]
    OR?: QiancaiDouTransactionWhereInput[]
    NOT?: QiancaiDouTransactionWhereInput | QiancaiDouTransactionWhereInput[]
    userId?: IntFilter<"QiancaiDouTransaction"> | number
    amount?: IntFilter<"QiancaiDouTransaction"> | number
    newBalance?: IntFilter<"QiancaiDouTransaction"> | number
    reason?: StringFilter<"QiancaiDouTransaction"> | string
    description?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    refTable?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    refId?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    createdAt?: DateTimeFilter<"QiancaiDouTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type QiancaiDouTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    refTable?: SortOrderInput | SortOrder
    refId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: QiancaiDouTransactionCountOrderByAggregateInput
    _avg?: QiancaiDouTransactionAvgOrderByAggregateInput
    _max?: QiancaiDouTransactionMaxOrderByAggregateInput
    _min?: QiancaiDouTransactionMinOrderByAggregateInput
    _sum?: QiancaiDouTransactionSumOrderByAggregateInput
  }

  export type QiancaiDouTransactionScalarWhereWithAggregatesInput = {
    AND?: QiancaiDouTransactionScalarWhereWithAggregatesInput | QiancaiDouTransactionScalarWhereWithAggregatesInput[]
    OR?: QiancaiDouTransactionScalarWhereWithAggregatesInput[]
    NOT?: QiancaiDouTransactionScalarWhereWithAggregatesInput | QiancaiDouTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QiancaiDouTransaction"> | number
    userId?: IntWithAggregatesFilter<"QiancaiDouTransaction"> | number
    amount?: IntWithAggregatesFilter<"QiancaiDouTransaction"> | number
    newBalance?: IntWithAggregatesFilter<"QiancaiDouTransaction"> | number
    reason?: StringWithAggregatesFilter<"QiancaiDouTransaction"> | string
    description?: StringNullableWithAggregatesFilter<"QiancaiDouTransaction"> | string | null
    refTable?: StringNullableWithAggregatesFilter<"QiancaiDouTransaction"> | string | null
    refId?: StringNullableWithAggregatesFilter<"QiancaiDouTransaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"QiancaiDouTransaction"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    title?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    images?: StringNullableListFilter<"Product">
    priceInQiancaiDou?: IntFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    category?: StringFilter<"Product"> | string
    isActive?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    orderItems?: OrderItemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    images?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderItems?: OrderItemOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    title?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    images?: StringNullableListFilter<"Product">
    priceInQiancaiDou?: IntFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    category?: StringFilter<"Product"> | string
    isActive?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    orderItems?: OrderItemListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    images?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    title?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    images?: StringNullableListFilter<"Product">
    priceInQiancaiDou?: IntWithAggregatesFilter<"Product"> | number
    stock?: IntWithAggregatesFilter<"Product"> | number
    category?: StringWithAggregatesFilter<"Product"> | string
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    totalCost?: IntFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    shippingAddress?: StringNullableFilter<"Order"> | string | null
    note?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: OrderItemListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: OrderItemOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: IntFilter<"Order"> | number
    totalCost?: IntFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    shippingAddress?: StringNullableFilter<"Order"> | string | null
    note?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: OrderItemListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    userId?: IntWithAggregatesFilter<"Order"> | number
    totalCost?: IntWithAggregatesFilter<"Order"> | number
    status?: StringWithAggregatesFilter<"Order"> | string
    shippingAddress?: StringNullableWithAggregatesFilter<"Order"> | string | null
    note?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: IntFilter<"OrderItem"> | number
    totalPrice?: IntFilter<"OrderItem"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: IntFilter<"OrderItem"> | number
    totalPrice?: IntFilter<"OrderItem"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderItem"> | number
    orderId?: IntWithAggregatesFilter<"OrderItem"> | number
    productId?: IntWithAggregatesFilter<"OrderItem"> | number
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    unitPrice?: IntWithAggregatesFilter<"OrderItem"> | number
    totalPrice?: IntWithAggregatesFilter<"OrderItem"> | number
  }

  export type OfflineCourseWhereInput = {
    AND?: OfflineCourseWhereInput | OfflineCourseWhereInput[]
    OR?: OfflineCourseWhereInput[]
    NOT?: OfflineCourseWhereInput | OfflineCourseWhereInput[]
    id?: IntFilter<"OfflineCourse"> | number
    title?: StringFilter<"OfflineCourse"> | string
    description?: StringFilter<"OfflineCourse"> | string
    instructor?: StringNullableFilter<"OfflineCourse"> | string | null
    category?: StringFilter<"OfflineCourse"> | string
    duration?: IntNullableFilter<"OfflineCourse"> | number | null
    imageUrl?: StringNullableFilter<"OfflineCourse"> | string | null
    isActive?: BoolFilter<"OfflineCourse"> | boolean
    createdAt?: DateTimeFilter<"OfflineCourse"> | Date | string
    updatedAt?: DateTimeFilter<"OfflineCourse"> | Date | string
    schedules?: CourseScheduleListRelationFilter
  }

  export type OfflineCourseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructor?: SortOrderInput | SortOrder
    category?: SortOrder
    duration?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    schedules?: CourseScheduleOrderByRelationAggregateInput
  }

  export type OfflineCourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OfflineCourseWhereInput | OfflineCourseWhereInput[]
    OR?: OfflineCourseWhereInput[]
    NOT?: OfflineCourseWhereInput | OfflineCourseWhereInput[]
    title?: StringFilter<"OfflineCourse"> | string
    description?: StringFilter<"OfflineCourse"> | string
    instructor?: StringNullableFilter<"OfflineCourse"> | string | null
    category?: StringFilter<"OfflineCourse"> | string
    duration?: IntNullableFilter<"OfflineCourse"> | number | null
    imageUrl?: StringNullableFilter<"OfflineCourse"> | string | null
    isActive?: BoolFilter<"OfflineCourse"> | boolean
    createdAt?: DateTimeFilter<"OfflineCourse"> | Date | string
    updatedAt?: DateTimeFilter<"OfflineCourse"> | Date | string
    schedules?: CourseScheduleListRelationFilter
  }, "id">

  export type OfflineCourseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructor?: SortOrderInput | SortOrder
    category?: SortOrder
    duration?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OfflineCourseCountOrderByAggregateInput
    _avg?: OfflineCourseAvgOrderByAggregateInput
    _max?: OfflineCourseMaxOrderByAggregateInput
    _min?: OfflineCourseMinOrderByAggregateInput
    _sum?: OfflineCourseSumOrderByAggregateInput
  }

  export type OfflineCourseScalarWhereWithAggregatesInput = {
    AND?: OfflineCourseScalarWhereWithAggregatesInput | OfflineCourseScalarWhereWithAggregatesInput[]
    OR?: OfflineCourseScalarWhereWithAggregatesInput[]
    NOT?: OfflineCourseScalarWhereWithAggregatesInput | OfflineCourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OfflineCourse"> | number
    title?: StringWithAggregatesFilter<"OfflineCourse"> | string
    description?: StringWithAggregatesFilter<"OfflineCourse"> | string
    instructor?: StringNullableWithAggregatesFilter<"OfflineCourse"> | string | null
    category?: StringWithAggregatesFilter<"OfflineCourse"> | string
    duration?: IntNullableWithAggregatesFilter<"OfflineCourse"> | number | null
    imageUrl?: StringNullableWithAggregatesFilter<"OfflineCourse"> | string | null
    isActive?: BoolWithAggregatesFilter<"OfflineCourse"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"OfflineCourse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OfflineCourse"> | Date | string
  }

  export type CourseScheduleWhereInput = {
    AND?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    OR?: CourseScheduleWhereInput[]
    NOT?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    id?: IntFilter<"CourseSchedule"> | number
    courseId?: IntFilter<"CourseSchedule"> | number
    startTime?: DateTimeFilter<"CourseSchedule"> | Date | string
    endTime?: DateTimeFilter<"CourseSchedule"> | Date | string
    location?: StringNullableFilter<"CourseSchedule"> | string | null
    capacity?: IntFilter<"CourseSchedule"> | number
    bookedSlots?: IntFilter<"CourseSchedule"> | number
    feeInQiancaiDou?: IntFilter<"CourseSchedule"> | number
    isActive?: BoolFilter<"CourseSchedule"> | boolean
    createdAt?: DateTimeFilter<"CourseSchedule"> | Date | string
    course?: XOR<OfflineCourseScalarRelationFilter, OfflineCourseWhereInput>
    appointments?: UserAppointmentListRelationFilter
  }

  export type CourseScheduleOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrderInput | SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    course?: OfflineCourseOrderByWithRelationInput
    appointments?: UserAppointmentOrderByRelationAggregateInput
  }

  export type CourseScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    OR?: CourseScheduleWhereInput[]
    NOT?: CourseScheduleWhereInput | CourseScheduleWhereInput[]
    courseId?: IntFilter<"CourseSchedule"> | number
    startTime?: DateTimeFilter<"CourseSchedule"> | Date | string
    endTime?: DateTimeFilter<"CourseSchedule"> | Date | string
    location?: StringNullableFilter<"CourseSchedule"> | string | null
    capacity?: IntFilter<"CourseSchedule"> | number
    bookedSlots?: IntFilter<"CourseSchedule"> | number
    feeInQiancaiDou?: IntFilter<"CourseSchedule"> | number
    isActive?: BoolFilter<"CourseSchedule"> | boolean
    createdAt?: DateTimeFilter<"CourseSchedule"> | Date | string
    course?: XOR<OfflineCourseScalarRelationFilter, OfflineCourseWhereInput>
    appointments?: UserAppointmentListRelationFilter
  }, "id">

  export type CourseScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrderInput | SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: CourseScheduleCountOrderByAggregateInput
    _avg?: CourseScheduleAvgOrderByAggregateInput
    _max?: CourseScheduleMaxOrderByAggregateInput
    _min?: CourseScheduleMinOrderByAggregateInput
    _sum?: CourseScheduleSumOrderByAggregateInput
  }

  export type CourseScheduleScalarWhereWithAggregatesInput = {
    AND?: CourseScheduleScalarWhereWithAggregatesInput | CourseScheduleScalarWhereWithAggregatesInput[]
    OR?: CourseScheduleScalarWhereWithAggregatesInput[]
    NOT?: CourseScheduleScalarWhereWithAggregatesInput | CourseScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CourseSchedule"> | number
    courseId?: IntWithAggregatesFilter<"CourseSchedule"> | number
    startTime?: DateTimeWithAggregatesFilter<"CourseSchedule"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"CourseSchedule"> | Date | string
    location?: StringNullableWithAggregatesFilter<"CourseSchedule"> | string | null
    capacity?: IntWithAggregatesFilter<"CourseSchedule"> | number
    bookedSlots?: IntWithAggregatesFilter<"CourseSchedule"> | number
    feeInQiancaiDou?: IntWithAggregatesFilter<"CourseSchedule"> | number
    isActive?: BoolWithAggregatesFilter<"CourseSchedule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CourseSchedule"> | Date | string
  }

  export type UserAppointmentWhereInput = {
    AND?: UserAppointmentWhereInput | UserAppointmentWhereInput[]
    OR?: UserAppointmentWhereInput[]
    NOT?: UserAppointmentWhereInput | UserAppointmentWhereInput[]
    id?: IntFilter<"UserAppointment"> | number
    userId?: IntFilter<"UserAppointment"> | number
    scheduleId?: IntFilter<"UserAppointment"> | number
    status?: StringFilter<"UserAppointment"> | string
    note?: StringNullableFilter<"UserAppointment"> | string | null
    createdAt?: DateTimeFilter<"UserAppointment"> | Date | string
    updatedAt?: DateTimeFilter<"UserAppointment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    schedule?: XOR<CourseScheduleScalarRelationFilter, CourseScheduleWhereInput>
  }

  export type UserAppointmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
    status?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    schedule?: CourseScheduleOrderByWithRelationInput
  }

  export type UserAppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_scheduleId?: UserAppointmentUserIdScheduleIdCompoundUniqueInput
    AND?: UserAppointmentWhereInput | UserAppointmentWhereInput[]
    OR?: UserAppointmentWhereInput[]
    NOT?: UserAppointmentWhereInput | UserAppointmentWhereInput[]
    userId?: IntFilter<"UserAppointment"> | number
    scheduleId?: IntFilter<"UserAppointment"> | number
    status?: StringFilter<"UserAppointment"> | string
    note?: StringNullableFilter<"UserAppointment"> | string | null
    createdAt?: DateTimeFilter<"UserAppointment"> | Date | string
    updatedAt?: DateTimeFilter<"UserAppointment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    schedule?: XOR<CourseScheduleScalarRelationFilter, CourseScheduleWhereInput>
  }, "id" | "userId_scheduleId">

  export type UserAppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
    status?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserAppointmentCountOrderByAggregateInput
    _avg?: UserAppointmentAvgOrderByAggregateInput
    _max?: UserAppointmentMaxOrderByAggregateInput
    _min?: UserAppointmentMinOrderByAggregateInput
    _sum?: UserAppointmentSumOrderByAggregateInput
  }

  export type UserAppointmentScalarWhereWithAggregatesInput = {
    AND?: UserAppointmentScalarWhereWithAggregatesInput | UserAppointmentScalarWhereWithAggregatesInput[]
    OR?: UserAppointmentScalarWhereWithAggregatesInput[]
    NOT?: UserAppointmentScalarWhereWithAggregatesInput | UserAppointmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserAppointment"> | number
    userId?: IntWithAggregatesFilter<"UserAppointment"> | number
    scheduleId?: IntWithAggregatesFilter<"UserAppointment"> | number
    status?: StringWithAggregatesFilter<"UserAppointment"> | string
    note?: StringNullableWithAggregatesFilter<"UserAppointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserAppointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserAppointment"> | Date | string
  }

  export type TravelPostWhereInput = {
    AND?: TravelPostWhereInput | TravelPostWhereInput[]
    OR?: TravelPostWhereInput[]
    NOT?: TravelPostWhereInput | TravelPostWhereInput[]
    id?: IntFilter<"TravelPost"> | number
    title?: StringFilter<"TravelPost"> | string
    content?: StringFilter<"TravelPost"> | string
    summary?: StringNullableFilter<"TravelPost"> | string | null
    category?: StringFilter<"TravelPost"> | string
    tags?: StringNullableListFilter<"TravelPost">
    imageUrl?: StringNullableFilter<"TravelPost"> | string | null
    images?: StringNullableListFilter<"TravelPost">
    author?: StringNullableFilter<"TravelPost"> | string | null
    isPublished?: BoolFilter<"TravelPost"> | boolean
    viewCount?: IntFilter<"TravelPost"> | number
    createdAt?: DateTimeFilter<"TravelPost"> | Date | string
    updatedAt?: DateTimeFilter<"TravelPost"> | Date | string
  }

  export type TravelPostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    images?: SortOrder
    author?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TravelPostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TravelPostWhereInput | TravelPostWhereInput[]
    OR?: TravelPostWhereInput[]
    NOT?: TravelPostWhereInput | TravelPostWhereInput[]
    title?: StringFilter<"TravelPost"> | string
    content?: StringFilter<"TravelPost"> | string
    summary?: StringNullableFilter<"TravelPost"> | string | null
    category?: StringFilter<"TravelPost"> | string
    tags?: StringNullableListFilter<"TravelPost">
    imageUrl?: StringNullableFilter<"TravelPost"> | string | null
    images?: StringNullableListFilter<"TravelPost">
    author?: StringNullableFilter<"TravelPost"> | string | null
    isPublished?: BoolFilter<"TravelPost"> | boolean
    viewCount?: IntFilter<"TravelPost"> | number
    createdAt?: DateTimeFilter<"TravelPost"> | Date | string
    updatedAt?: DateTimeFilter<"TravelPost"> | Date | string
  }, "id">

  export type TravelPostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    images?: SortOrder
    author?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TravelPostCountOrderByAggregateInput
    _avg?: TravelPostAvgOrderByAggregateInput
    _max?: TravelPostMaxOrderByAggregateInput
    _min?: TravelPostMinOrderByAggregateInput
    _sum?: TravelPostSumOrderByAggregateInput
  }

  export type TravelPostScalarWhereWithAggregatesInput = {
    AND?: TravelPostScalarWhereWithAggregatesInput | TravelPostScalarWhereWithAggregatesInput[]
    OR?: TravelPostScalarWhereWithAggregatesInput[]
    NOT?: TravelPostScalarWhereWithAggregatesInput | TravelPostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TravelPost"> | number
    title?: StringWithAggregatesFilter<"TravelPost"> | string
    content?: StringWithAggregatesFilter<"TravelPost"> | string
    summary?: StringNullableWithAggregatesFilter<"TravelPost"> | string | null
    category?: StringWithAggregatesFilter<"TravelPost"> | string
    tags?: StringNullableListFilter<"TravelPost">
    imageUrl?: StringNullableWithAggregatesFilter<"TravelPost"> | string | null
    images?: StringNullableListFilter<"TravelPost">
    author?: StringNullableWithAggregatesFilter<"TravelPost"> | string | null
    isPublished?: BoolWithAggregatesFilter<"TravelPost"> | boolean
    viewCount?: IntWithAggregatesFilter<"TravelPost"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TravelPost"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TravelPost"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    appointments?: UserAppointmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    appointments?: UserAppointmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    appointments?: UserAppointmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    appointments?: UserAppointmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QiancaiDouTransactionCreateInput = {
    amount: number
    newBalance: number
    reason: string
    description?: string | null
    refTable?: string | null
    refId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutQiancaiDouTransactionsInput
  }

  export type QiancaiDouTransactionUncheckedCreateInput = {
    id?: number
    userId: number
    amount: number
    newBalance: number
    reason: string
    description?: string | null
    refTable?: string | null
    refId?: string | null
    createdAt?: Date | string
  }

  export type QiancaiDouTransactionUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQiancaiDouTransactionsNestedInput
  }

  export type QiancaiDouTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QiancaiDouTransactionCreateManyInput = {
    id?: number
    userId: number
    amount: number
    newBalance: number
    reason: string
    description?: string | null
    refTable?: string | null
    refId?: string | null
    createdAt?: Date | string
  }

  export type QiancaiDouTransactionUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QiancaiDouTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    title: string
    description: string
    images?: ProductCreateimagesInput | string[]
    priceInQiancaiDou: number
    stock?: number
    category?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    images?: ProductCreateimagesInput | string[]
    priceInQiancaiDou: number
    stock?: number
    category?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    images?: ProductUpdateimagesInput | string[]
    priceInQiancaiDou?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    images?: ProductUpdateimagesInput | string[]
    priceInQiancaiDou?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    title: string
    description: string
    images?: ProductCreateimagesInput | string[]
    priceInQiancaiDou: number
    stock?: number
    category?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    images?: ProductUpdateimagesInput | string[]
    priceInQiancaiDou?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    images?: ProductUpdateimagesInput | string[]
    priceInQiancaiDou?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    order: OrderCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    orderId: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyInput = {
    id?: number
    orderId: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type OfflineCourseCreateInput = {
    title: string
    description: string
    instructor?: string | null
    category: string
    duration?: number | null
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: CourseScheduleCreateNestedManyWithoutCourseInput
  }

  export type OfflineCourseUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    instructor?: string | null
    category: string
    duration?: number | null
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: CourseScheduleUncheckedCreateNestedManyWithoutCourseInput
  }

  export type OfflineCourseUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: CourseScheduleUpdateManyWithoutCourseNestedInput
  }

  export type OfflineCourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type OfflineCourseCreateManyInput = {
    id?: number
    title: string
    description: string
    instructor?: string | null
    category: string
    duration?: number | null
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfflineCourseUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfflineCourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleCreateInput = {
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
    course: OfflineCourseCreateNestedOneWithoutSchedulesInput
    appointments?: UserAppointmentCreateNestedManyWithoutScheduleInput
  }

  export type CourseScheduleUncheckedCreateInput = {
    id?: number
    courseId: number
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
    appointments?: UserAppointmentUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type CourseScheduleUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: OfflineCourseUpdateOneRequiredWithoutSchedulesNestedInput
    appointments?: UserAppointmentUpdateManyWithoutScheduleNestedInput
  }

  export type CourseScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: UserAppointmentUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type CourseScheduleCreateManyInput = {
    id?: number
    courseId: number
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CourseScheduleUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentCreateInput = {
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAppointmentsInput
    schedule: CourseScheduleCreateNestedOneWithoutAppointmentsInput
  }

  export type UserAppointmentUncheckedCreateInput = {
    id?: number
    userId: number
    scheduleId: number
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAppointmentUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    schedule?: CourseScheduleUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type UserAppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentCreateManyInput = {
    id?: number
    userId: number
    scheduleId: number
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAppointmentUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TravelPostCreateInput = {
    title: string
    content: string
    summary?: string | null
    category: string
    tags?: TravelPostCreatetagsInput | string[]
    imageUrl?: string | null
    images?: TravelPostCreateimagesInput | string[]
    author?: string | null
    isPublished?: boolean
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TravelPostUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    summary?: string | null
    category: string
    tags?: TravelPostCreatetagsInput | string[]
    imageUrl?: string | null
    images?: TravelPostCreateimagesInput | string[]
    author?: string | null
    isPublished?: boolean
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TravelPostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: TravelPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    images?: TravelPostUpdateimagesInput | string[]
    author?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TravelPostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: TravelPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    images?: TravelPostUpdateimagesInput | string[]
    author?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TravelPostCreateManyInput = {
    id?: number
    title: string
    content: string
    summary?: string | null
    category: string
    tags?: TravelPostCreatetagsInput | string[]
    imageUrl?: string | null
    images?: TravelPostCreateimagesInput | string[]
    author?: string | null
    isPublished?: boolean
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TravelPostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: TravelPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    images?: TravelPostUpdateimagesInput | string[]
    author?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TravelPostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: TravelPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    images?: TravelPostUpdateimagesInput | string[]
    author?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type QiancaiDouTransactionListRelationFilter = {
    every?: QiancaiDouTransactionWhereInput
    some?: QiancaiDouTransactionWhereInput
    none?: QiancaiDouTransactionWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type UserAppointmentListRelationFilter = {
    every?: UserAppointmentWhereInput
    some?: UserAppointmentWhereInput
    none?: UserAppointmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type QiancaiDouTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    qiancaiDouBalance?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    qiancaiDouBalance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    qiancaiDouBalance?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    qiancaiDouBalance?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    qiancaiDouBalance?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QiancaiDouTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    refTable?: SortOrder
    refId?: SortOrder
    createdAt?: SortOrder
  }

  export type QiancaiDouTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
  }

  export type QiancaiDouTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    refTable?: SortOrder
    refId?: SortOrder
    createdAt?: SortOrder
  }

  export type QiancaiDouTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    refTable?: SortOrder
    refId?: SortOrder
    createdAt?: SortOrder
  }

  export type QiancaiDouTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    newBalance?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    images?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    priceInQiancaiDou?: SortOrder
    stock?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    shippingAddress?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    shippingAddress?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
    status?: SortOrder
    shippingAddress?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalCost?: SortOrder
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CourseScheduleListRelationFilter = {
    every?: CourseScheduleWhereInput
    some?: CourseScheduleWhereInput
    none?: CourseScheduleWhereInput
  }

  export type CourseScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfflineCourseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructor?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfflineCourseAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type OfflineCourseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructor?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfflineCourseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructor?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfflineCourseSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type OfflineCourseScalarRelationFilter = {
    is?: OfflineCourseWhereInput
    isNot?: OfflineCourseWhereInput
  }

  export type CourseScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
  }

  export type CourseScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    capacity?: SortOrder
    bookedSlots?: SortOrder
    feeInQiancaiDou?: SortOrder
  }

  export type CourseScheduleScalarRelationFilter = {
    is?: CourseScheduleWhereInput
    isNot?: CourseScheduleWhereInput
  }

  export type UserAppointmentUserIdScheduleIdCompoundUniqueInput = {
    userId: number
    scheduleId: number
  }

  export type UserAppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
  }

  export type UserAppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scheduleId?: SortOrder
  }

  export type TravelPostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrder
    images?: SortOrder
    author?: SortOrder
    isPublished?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TravelPostAvgOrderByAggregateInput = {
    id?: SortOrder
    viewCount?: SortOrder
  }

  export type TravelPostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    author?: SortOrder
    isPublished?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TravelPostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    summary?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    author?: SortOrder
    isPublished?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TravelPostSumOrderByAggregateInput = {
    id?: SortOrder
    viewCount?: SortOrder
  }

  export type QiancaiDouTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<QiancaiDouTransactionCreateWithoutUserInput, QiancaiDouTransactionUncheckedCreateWithoutUserInput> | QiancaiDouTransactionCreateWithoutUserInput[] | QiancaiDouTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QiancaiDouTransactionCreateOrConnectWithoutUserInput | QiancaiDouTransactionCreateOrConnectWithoutUserInput[]
    createMany?: QiancaiDouTransactionCreateManyUserInputEnvelope
    connect?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type UserAppointmentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAppointmentCreateWithoutUserInput, UserAppointmentUncheckedCreateWithoutUserInput> | UserAppointmentCreateWithoutUserInput[] | UserAppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutUserInput | UserAppointmentCreateOrConnectWithoutUserInput[]
    createMany?: UserAppointmentCreateManyUserInputEnvelope
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
  }

  export type QiancaiDouTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QiancaiDouTransactionCreateWithoutUserInput, QiancaiDouTransactionUncheckedCreateWithoutUserInput> | QiancaiDouTransactionCreateWithoutUserInput[] | QiancaiDouTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QiancaiDouTransactionCreateOrConnectWithoutUserInput | QiancaiDouTransactionCreateOrConnectWithoutUserInput[]
    createMany?: QiancaiDouTransactionCreateManyUserInputEnvelope
    connect?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type UserAppointmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAppointmentCreateWithoutUserInput, UserAppointmentUncheckedCreateWithoutUserInput> | UserAppointmentCreateWithoutUserInput[] | UserAppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutUserInput | UserAppointmentCreateOrConnectWithoutUserInput[]
    createMany?: UserAppointmentCreateManyUserInputEnvelope
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type QiancaiDouTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<QiancaiDouTransactionCreateWithoutUserInput, QiancaiDouTransactionUncheckedCreateWithoutUserInput> | QiancaiDouTransactionCreateWithoutUserInput[] | QiancaiDouTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QiancaiDouTransactionCreateOrConnectWithoutUserInput | QiancaiDouTransactionCreateOrConnectWithoutUserInput[]
    upsert?: QiancaiDouTransactionUpsertWithWhereUniqueWithoutUserInput | QiancaiDouTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QiancaiDouTransactionCreateManyUserInputEnvelope
    set?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    disconnect?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    delete?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    connect?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    update?: QiancaiDouTransactionUpdateWithWhereUniqueWithoutUserInput | QiancaiDouTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QiancaiDouTransactionUpdateManyWithWhereWithoutUserInput | QiancaiDouTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QiancaiDouTransactionScalarWhereInput | QiancaiDouTransactionScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserAppointmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAppointmentCreateWithoutUserInput, UserAppointmentUncheckedCreateWithoutUserInput> | UserAppointmentCreateWithoutUserInput[] | UserAppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutUserInput | UserAppointmentCreateOrConnectWithoutUserInput[]
    upsert?: UserAppointmentUpsertWithWhereUniqueWithoutUserInput | UserAppointmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAppointmentCreateManyUserInputEnvelope
    set?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    disconnect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    delete?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    update?: UserAppointmentUpdateWithWhereUniqueWithoutUserInput | UserAppointmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAppointmentUpdateManyWithWhereWithoutUserInput | UserAppointmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAppointmentScalarWhereInput | UserAppointmentScalarWhereInput[]
  }

  export type QiancaiDouTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QiancaiDouTransactionCreateWithoutUserInput, QiancaiDouTransactionUncheckedCreateWithoutUserInput> | QiancaiDouTransactionCreateWithoutUserInput[] | QiancaiDouTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QiancaiDouTransactionCreateOrConnectWithoutUserInput | QiancaiDouTransactionCreateOrConnectWithoutUserInput[]
    upsert?: QiancaiDouTransactionUpsertWithWhereUniqueWithoutUserInput | QiancaiDouTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QiancaiDouTransactionCreateManyUserInputEnvelope
    set?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    disconnect?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    delete?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    connect?: QiancaiDouTransactionWhereUniqueInput | QiancaiDouTransactionWhereUniqueInput[]
    update?: QiancaiDouTransactionUpdateWithWhereUniqueWithoutUserInput | QiancaiDouTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QiancaiDouTransactionUpdateManyWithWhereWithoutUserInput | QiancaiDouTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QiancaiDouTransactionScalarWhereInput | QiancaiDouTransactionScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserAppointmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAppointmentCreateWithoutUserInput, UserAppointmentUncheckedCreateWithoutUserInput> | UserAppointmentCreateWithoutUserInput[] | UserAppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutUserInput | UserAppointmentCreateOrConnectWithoutUserInput[]
    upsert?: UserAppointmentUpsertWithWhereUniqueWithoutUserInput | UserAppointmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAppointmentCreateManyUserInputEnvelope
    set?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    disconnect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    delete?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    update?: UserAppointmentUpdateWithWhereUniqueWithoutUserInput | UserAppointmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAppointmentUpdateManyWithWhereWithoutUserInput | UserAppointmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAppointmentScalarWhereInput | UserAppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutQiancaiDouTransactionsInput = {
    create?: XOR<UserCreateWithoutQiancaiDouTransactionsInput, UserUncheckedCreateWithoutQiancaiDouTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQiancaiDouTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutQiancaiDouTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutQiancaiDouTransactionsInput, UserUncheckedCreateWithoutQiancaiDouTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQiancaiDouTransactionsInput
    upsert?: UserUpsertWithoutQiancaiDouTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQiancaiDouTransactionsInput, UserUpdateWithoutQiancaiDouTransactionsInput>, UserUncheckedUpdateWithoutQiancaiDouTransactionsInput>
  }

  export type ProductCreateimagesInput = {
    set: string[]
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ProductUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    upsert?: OrderUpsertWithoutItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutItemsInput, OrderUpdateWithoutItemsInput>, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    upsert?: ProductUpsertWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderItemsInput, ProductUpdateWithoutOrderItemsInput>, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type CourseScheduleCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
  }

  export type CourseScheduleUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseScheduleUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    upsert?: CourseScheduleUpsertWithWhereUniqueWithoutCourseInput | CourseScheduleUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    set?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    disconnect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    delete?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    update?: CourseScheduleUpdateWithWhereUniqueWithoutCourseInput | CourseScheduleUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseScheduleUpdateManyWithWhereWithoutCourseInput | CourseScheduleUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
  }

  export type CourseScheduleUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput> | CourseScheduleCreateWithoutCourseInput[] | CourseScheduleUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutCourseInput | CourseScheduleCreateOrConnectWithoutCourseInput[]
    upsert?: CourseScheduleUpsertWithWhereUniqueWithoutCourseInput | CourseScheduleUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseScheduleCreateManyCourseInputEnvelope
    set?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    disconnect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    delete?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    connect?: CourseScheduleWhereUniqueInput | CourseScheduleWhereUniqueInput[]
    update?: CourseScheduleUpdateWithWhereUniqueWithoutCourseInput | CourseScheduleUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseScheduleUpdateManyWithWhereWithoutCourseInput | CourseScheduleUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
  }

  export type OfflineCourseCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<OfflineCourseCreateWithoutSchedulesInput, OfflineCourseUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: OfflineCourseCreateOrConnectWithoutSchedulesInput
    connect?: OfflineCourseWhereUniqueInput
  }

  export type UserAppointmentCreateNestedManyWithoutScheduleInput = {
    create?: XOR<UserAppointmentCreateWithoutScheduleInput, UserAppointmentUncheckedCreateWithoutScheduleInput> | UserAppointmentCreateWithoutScheduleInput[] | UserAppointmentUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutScheduleInput | UserAppointmentCreateOrConnectWithoutScheduleInput[]
    createMany?: UserAppointmentCreateManyScheduleInputEnvelope
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
  }

  export type UserAppointmentUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<UserAppointmentCreateWithoutScheduleInput, UserAppointmentUncheckedCreateWithoutScheduleInput> | UserAppointmentCreateWithoutScheduleInput[] | UserAppointmentUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutScheduleInput | UserAppointmentCreateOrConnectWithoutScheduleInput[]
    createMany?: UserAppointmentCreateManyScheduleInputEnvelope
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
  }

  export type OfflineCourseUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<OfflineCourseCreateWithoutSchedulesInput, OfflineCourseUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: OfflineCourseCreateOrConnectWithoutSchedulesInput
    upsert?: OfflineCourseUpsertWithoutSchedulesInput
    connect?: OfflineCourseWhereUniqueInput
    update?: XOR<XOR<OfflineCourseUpdateToOneWithWhereWithoutSchedulesInput, OfflineCourseUpdateWithoutSchedulesInput>, OfflineCourseUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserAppointmentUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<UserAppointmentCreateWithoutScheduleInput, UserAppointmentUncheckedCreateWithoutScheduleInput> | UserAppointmentCreateWithoutScheduleInput[] | UserAppointmentUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutScheduleInput | UserAppointmentCreateOrConnectWithoutScheduleInput[]
    upsert?: UserAppointmentUpsertWithWhereUniqueWithoutScheduleInput | UserAppointmentUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: UserAppointmentCreateManyScheduleInputEnvelope
    set?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    disconnect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    delete?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    update?: UserAppointmentUpdateWithWhereUniqueWithoutScheduleInput | UserAppointmentUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: UserAppointmentUpdateManyWithWhereWithoutScheduleInput | UserAppointmentUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: UserAppointmentScalarWhereInput | UserAppointmentScalarWhereInput[]
  }

  export type UserAppointmentUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<UserAppointmentCreateWithoutScheduleInput, UserAppointmentUncheckedCreateWithoutScheduleInput> | UserAppointmentCreateWithoutScheduleInput[] | UserAppointmentUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: UserAppointmentCreateOrConnectWithoutScheduleInput | UserAppointmentCreateOrConnectWithoutScheduleInput[]
    upsert?: UserAppointmentUpsertWithWhereUniqueWithoutScheduleInput | UserAppointmentUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: UserAppointmentCreateManyScheduleInputEnvelope
    set?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    disconnect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    delete?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    connect?: UserAppointmentWhereUniqueInput | UserAppointmentWhereUniqueInput[]
    update?: UserAppointmentUpdateWithWhereUniqueWithoutScheduleInput | UserAppointmentUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: UserAppointmentUpdateManyWithWhereWithoutScheduleInput | UserAppointmentUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: UserAppointmentScalarWhereInput | UserAppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseScheduleCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<CourseScheduleCreateWithoutAppointmentsInput, CourseScheduleUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutAppointmentsInput
    connect?: CourseScheduleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type CourseScheduleUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<CourseScheduleCreateWithoutAppointmentsInput, CourseScheduleUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: CourseScheduleCreateOrConnectWithoutAppointmentsInput
    upsert?: CourseScheduleUpsertWithoutAppointmentsInput
    connect?: CourseScheduleWhereUniqueInput
    update?: XOR<XOR<CourseScheduleUpdateToOneWithWhereWithoutAppointmentsInput, CourseScheduleUpdateWithoutAppointmentsInput>, CourseScheduleUncheckedUpdateWithoutAppointmentsInput>
  }

  export type TravelPostCreatetagsInput = {
    set: string[]
  }

  export type TravelPostCreateimagesInput = {
    set: string[]
  }

  export type TravelPostUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TravelPostUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type QiancaiDouTransactionCreateWithoutUserInput = {
    amount: number
    newBalance: number
    reason: string
    description?: string | null
    refTable?: string | null
    refId?: string | null
    createdAt?: Date | string
  }

  export type QiancaiDouTransactionUncheckedCreateWithoutUserInput = {
    id?: number
    amount: number
    newBalance: number
    reason: string
    description?: string | null
    refTable?: string | null
    refId?: string | null
    createdAt?: Date | string
  }

  export type QiancaiDouTransactionCreateOrConnectWithoutUserInput = {
    where: QiancaiDouTransactionWhereUniqueInput
    create: XOR<QiancaiDouTransactionCreateWithoutUserInput, QiancaiDouTransactionUncheckedCreateWithoutUserInput>
  }

  export type QiancaiDouTransactionCreateManyUserInputEnvelope = {
    data: QiancaiDouTransactionCreateManyUserInput | QiancaiDouTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAppointmentCreateWithoutUserInput = {
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    schedule: CourseScheduleCreateNestedOneWithoutAppointmentsInput
  }

  export type UserAppointmentUncheckedCreateWithoutUserInput = {
    id?: number
    scheduleId: number
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAppointmentCreateOrConnectWithoutUserInput = {
    where: UserAppointmentWhereUniqueInput
    create: XOR<UserAppointmentCreateWithoutUserInput, UserAppointmentUncheckedCreateWithoutUserInput>
  }

  export type UserAppointmentCreateManyUserInputEnvelope = {
    data: UserAppointmentCreateManyUserInput | UserAppointmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QiancaiDouTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: QiancaiDouTransactionWhereUniqueInput
    update: XOR<QiancaiDouTransactionUpdateWithoutUserInput, QiancaiDouTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<QiancaiDouTransactionCreateWithoutUserInput, QiancaiDouTransactionUncheckedCreateWithoutUserInput>
  }

  export type QiancaiDouTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: QiancaiDouTransactionWhereUniqueInput
    data: XOR<QiancaiDouTransactionUpdateWithoutUserInput, QiancaiDouTransactionUncheckedUpdateWithoutUserInput>
  }

  export type QiancaiDouTransactionUpdateManyWithWhereWithoutUserInput = {
    where: QiancaiDouTransactionScalarWhereInput
    data: XOR<QiancaiDouTransactionUpdateManyMutationInput, QiancaiDouTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type QiancaiDouTransactionScalarWhereInput = {
    AND?: QiancaiDouTransactionScalarWhereInput | QiancaiDouTransactionScalarWhereInput[]
    OR?: QiancaiDouTransactionScalarWhereInput[]
    NOT?: QiancaiDouTransactionScalarWhereInput | QiancaiDouTransactionScalarWhereInput[]
    id?: IntFilter<"QiancaiDouTransaction"> | number
    userId?: IntFilter<"QiancaiDouTransaction"> | number
    amount?: IntFilter<"QiancaiDouTransaction"> | number
    newBalance?: IntFilter<"QiancaiDouTransaction"> | number
    reason?: StringFilter<"QiancaiDouTransaction"> | string
    description?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    refTable?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    refId?: StringNullableFilter<"QiancaiDouTransaction"> | string | null
    createdAt?: DateTimeFilter<"QiancaiDouTransaction"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    totalCost?: IntFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    shippingAddress?: StringNullableFilter<"Order"> | string | null
    note?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type UserAppointmentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAppointmentWhereUniqueInput
    update: XOR<UserAppointmentUpdateWithoutUserInput, UserAppointmentUncheckedUpdateWithoutUserInput>
    create: XOR<UserAppointmentCreateWithoutUserInput, UserAppointmentUncheckedCreateWithoutUserInput>
  }

  export type UserAppointmentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAppointmentWhereUniqueInput
    data: XOR<UserAppointmentUpdateWithoutUserInput, UserAppointmentUncheckedUpdateWithoutUserInput>
  }

  export type UserAppointmentUpdateManyWithWhereWithoutUserInput = {
    where: UserAppointmentScalarWhereInput
    data: XOR<UserAppointmentUpdateManyMutationInput, UserAppointmentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAppointmentScalarWhereInput = {
    AND?: UserAppointmentScalarWhereInput | UserAppointmentScalarWhereInput[]
    OR?: UserAppointmentScalarWhereInput[]
    NOT?: UserAppointmentScalarWhereInput | UserAppointmentScalarWhereInput[]
    id?: IntFilter<"UserAppointment"> | number
    userId?: IntFilter<"UserAppointment"> | number
    scheduleId?: IntFilter<"UserAppointment"> | number
    status?: StringFilter<"UserAppointment"> | string
    note?: StringNullableFilter<"UserAppointment"> | string | null
    createdAt?: DateTimeFilter<"UserAppointment"> | Date | string
    updatedAt?: DateTimeFilter<"UserAppointment"> | Date | string
  }

  export type UserCreateWithoutQiancaiDouTransactionsInput = {
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutUserInput
    appointments?: UserAppointmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQiancaiDouTransactionsInput = {
    id?: number
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    appointments?: UserAppointmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQiancaiDouTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQiancaiDouTransactionsInput, UserUncheckedCreateWithoutQiancaiDouTransactionsInput>
  }

  export type UserUpsertWithoutQiancaiDouTransactionsInput = {
    update: XOR<UserUpdateWithoutQiancaiDouTransactionsInput, UserUncheckedUpdateWithoutQiancaiDouTransactionsInput>
    create: XOR<UserCreateWithoutQiancaiDouTransactionsInput, UserUncheckedCreateWithoutQiancaiDouTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQiancaiDouTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQiancaiDouTransactionsInput, UserUncheckedUpdateWithoutQiancaiDouTransactionsInput>
  }

  export type UserUpdateWithoutQiancaiDouTransactionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutUserNestedInput
    appointments?: UserAppointmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQiancaiDouTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    appointments?: UserAppointmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderItemCreateWithoutProductInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    order: OrderCreateNestedOneWithoutItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: number
    orderId: number
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: IntFilter<"OrderItem"> | number
    totalPrice?: IntFilter<"OrderItem"> | number
  }

  export type UserCreateWithoutOrdersInput = {
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionCreateNestedManyWithoutUserInput
    appointments?: UserAppointmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUncheckedCreateNestedManyWithoutUserInput
    appointments?: UserAppointmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUpdateManyWithoutUserNestedInput
    appointments?: UserAppointmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUncheckedUpdateManyWithoutUserNestedInput
    appointments?: UserAppointmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutItemsInput = {
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutItemsInput = {
    id?: number
    userId: number
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
  }

  export type ProductCreateWithoutOrderItemsInput = {
    title: string
    description: string
    images?: ProductCreateimagesInput | string[]
    priceInQiancaiDou: number
    stock?: number
    category?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    title: string
    description: string
    images?: ProductCreateimagesInput | string[]
    priceInQiancaiDou: number
    stock?: number
    category?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutOrderItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutItemsInput = {
    update: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type OrderUpdateWithoutItemsInput = {
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutOrderItemsInput = {
    update: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateWithoutOrderItemsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    images?: ProductUpdateimagesInput | string[]
    priceInQiancaiDou?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    images?: ProductUpdateimagesInput | string[]
    priceInQiancaiDou?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseScheduleCreateWithoutCourseInput = {
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
    appointments?: UserAppointmentCreateNestedManyWithoutScheduleInput
  }

  export type CourseScheduleUncheckedCreateWithoutCourseInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
    appointments?: UserAppointmentUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type CourseScheduleCreateOrConnectWithoutCourseInput = {
    where: CourseScheduleWhereUniqueInput
    create: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput>
  }

  export type CourseScheduleCreateManyCourseInputEnvelope = {
    data: CourseScheduleCreateManyCourseInput | CourseScheduleCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseScheduleUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseScheduleWhereUniqueInput
    update: XOR<CourseScheduleUpdateWithoutCourseInput, CourseScheduleUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseScheduleCreateWithoutCourseInput, CourseScheduleUncheckedCreateWithoutCourseInput>
  }

  export type CourseScheduleUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseScheduleWhereUniqueInput
    data: XOR<CourseScheduleUpdateWithoutCourseInput, CourseScheduleUncheckedUpdateWithoutCourseInput>
  }

  export type CourseScheduleUpdateManyWithWhereWithoutCourseInput = {
    where: CourseScheduleScalarWhereInput
    data: XOR<CourseScheduleUpdateManyMutationInput, CourseScheduleUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseScheduleScalarWhereInput = {
    AND?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
    OR?: CourseScheduleScalarWhereInput[]
    NOT?: CourseScheduleScalarWhereInput | CourseScheduleScalarWhereInput[]
    id?: IntFilter<"CourseSchedule"> | number
    courseId?: IntFilter<"CourseSchedule"> | number
    startTime?: DateTimeFilter<"CourseSchedule"> | Date | string
    endTime?: DateTimeFilter<"CourseSchedule"> | Date | string
    location?: StringNullableFilter<"CourseSchedule"> | string | null
    capacity?: IntFilter<"CourseSchedule"> | number
    bookedSlots?: IntFilter<"CourseSchedule"> | number
    feeInQiancaiDou?: IntFilter<"CourseSchedule"> | number
    isActive?: BoolFilter<"CourseSchedule"> | boolean
    createdAt?: DateTimeFilter<"CourseSchedule"> | Date | string
  }

  export type OfflineCourseCreateWithoutSchedulesInput = {
    title: string
    description: string
    instructor?: string | null
    category: string
    duration?: number | null
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfflineCourseUncheckedCreateWithoutSchedulesInput = {
    id?: number
    title: string
    description: string
    instructor?: string | null
    category: string
    duration?: number | null
    imageUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfflineCourseCreateOrConnectWithoutSchedulesInput = {
    where: OfflineCourseWhereUniqueInput
    create: XOR<OfflineCourseCreateWithoutSchedulesInput, OfflineCourseUncheckedCreateWithoutSchedulesInput>
  }

  export type UserAppointmentCreateWithoutScheduleInput = {
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAppointmentsInput
  }

  export type UserAppointmentUncheckedCreateWithoutScheduleInput = {
    id?: number
    userId: number
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAppointmentCreateOrConnectWithoutScheduleInput = {
    where: UserAppointmentWhereUniqueInput
    create: XOR<UserAppointmentCreateWithoutScheduleInput, UserAppointmentUncheckedCreateWithoutScheduleInput>
  }

  export type UserAppointmentCreateManyScheduleInputEnvelope = {
    data: UserAppointmentCreateManyScheduleInput | UserAppointmentCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type OfflineCourseUpsertWithoutSchedulesInput = {
    update: XOR<OfflineCourseUpdateWithoutSchedulesInput, OfflineCourseUncheckedUpdateWithoutSchedulesInput>
    create: XOR<OfflineCourseCreateWithoutSchedulesInput, OfflineCourseUncheckedCreateWithoutSchedulesInput>
    where?: OfflineCourseWhereInput
  }

  export type OfflineCourseUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: OfflineCourseWhereInput
    data: XOR<OfflineCourseUpdateWithoutSchedulesInput, OfflineCourseUncheckedUpdateWithoutSchedulesInput>
  }

  export type OfflineCourseUpdateWithoutSchedulesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfflineCourseUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentUpsertWithWhereUniqueWithoutScheduleInput = {
    where: UserAppointmentWhereUniqueInput
    update: XOR<UserAppointmentUpdateWithoutScheduleInput, UserAppointmentUncheckedUpdateWithoutScheduleInput>
    create: XOR<UserAppointmentCreateWithoutScheduleInput, UserAppointmentUncheckedCreateWithoutScheduleInput>
  }

  export type UserAppointmentUpdateWithWhereUniqueWithoutScheduleInput = {
    where: UserAppointmentWhereUniqueInput
    data: XOR<UserAppointmentUpdateWithoutScheduleInput, UserAppointmentUncheckedUpdateWithoutScheduleInput>
  }

  export type UserAppointmentUpdateManyWithWhereWithoutScheduleInput = {
    where: UserAppointmentScalarWhereInput
    data: XOR<UserAppointmentUpdateManyMutationInput, UserAppointmentUncheckedUpdateManyWithoutScheduleInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    email: string
    passwordHash: string
    qiancaiDouBalance?: number
    firstName?: string | null
    lastName?: string | null
    avatarUrl?: string | null
    language?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type CourseScheduleCreateWithoutAppointmentsInput = {
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
    course: OfflineCourseCreateNestedOneWithoutSchedulesInput
  }

  export type CourseScheduleUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    courseId: number
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CourseScheduleCreateOrConnectWithoutAppointmentsInput = {
    where: CourseScheduleWhereUniqueInput
    create: XOR<CourseScheduleCreateWithoutAppointmentsInput, CourseScheduleUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    qiancaiDouBalance?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qiancaiDouTransactions?: QiancaiDouTransactionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseScheduleUpsertWithoutAppointmentsInput = {
    update: XOR<CourseScheduleUpdateWithoutAppointmentsInput, CourseScheduleUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<CourseScheduleCreateWithoutAppointmentsInput, CourseScheduleUncheckedCreateWithoutAppointmentsInput>
    where?: CourseScheduleWhereInput
  }

  export type CourseScheduleUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: CourseScheduleWhereInput
    data: XOR<CourseScheduleUpdateWithoutAppointmentsInput, CourseScheduleUncheckedUpdateWithoutAppointmentsInput>
  }

  export type CourseScheduleUpdateWithoutAppointmentsInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: OfflineCourseUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type CourseScheduleUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QiancaiDouTransactionCreateManyUserInput = {
    id?: number
    amount: number
    newBalance: number
    reason: string
    description?: string | null
    refTable?: string | null
    refId?: string | null
    createdAt?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: number
    totalCost: number
    status?: string
    shippingAddress?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAppointmentCreateManyUserInput = {
    id?: number
    scheduleId: number
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QiancaiDouTransactionUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QiancaiDouTransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QiancaiDouTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    refTable?: NullableStringFieldUpdateOperationsInput | string | null
    refId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCost?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedule?: CourseScheduleUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type UserAppointmentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyProductInput = {
    id?: number
    orderId: number
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
  }

  export type CourseScheduleCreateManyCourseInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    capacity?: number
    bookedSlots?: number
    feeInQiancaiDou?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CourseScheduleUpdateWithoutCourseInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: UserAppointmentUpdateManyWithoutScheduleNestedInput
  }

  export type CourseScheduleUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: UserAppointmentUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type CourseScheduleUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: IntFieldUpdateOperationsInput | number
    bookedSlots?: IntFieldUpdateOperationsInput | number
    feeInQiancaiDou?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentCreateManyScheduleInput = {
    id?: number
    userId: number
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAppointmentUpdateWithoutScheduleInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type UserAppointmentUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAppointmentUncheckedUpdateManyWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
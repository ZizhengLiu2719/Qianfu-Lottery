generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  passwordHash            String
  qiancaiDouBalance       Int                      @default(0)
  firstName               String?
  lastName                String?
  avatarUrl               String?
  avatarData              String?                  // Base64编码的头像数据
  avatarMimeType          String?                  // 头像MIME类型
  avatarSize              Int?                     // 头像文件大小（字节）
  language                String                   @default("zh")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  
  // 关联关系
  qiancaiDouTransactions  QiancaiDouTransaction[]
  orders                  Order[]
  appointments            UserAppointment[]
  learningRegistrations   LearningRegistration[]
  travelRegistrations     TravelRegistration[]
  account                 Account?
  carts                   Cart[]
  addresses               Address[]
  studyAbroadRegistrations UserStudyAbroadRegistration[]
  summerCampRegistrations  UserSummerCampRegistration[]
  
  @@map("users")
}

// 仟彩豆交易记录
model QiancaiDouTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int      // 正数为增加，负数为减少
  newBalance  Int      // 交易后的余额
  reason      String   // 交易原因: ADMIN_ADJUSTMENT, PRODUCT_REDEMPTION, APPOINTMENT_FEE, TASK_REWARD
  description String?  // 详细描述
  refTable    String?  // 关联表名
  refId       String?  // 关联记录ID
  createdAt   DateTime @default(now())
  // 新增字段（向后兼容，可为空）
  type        QiancaiDouTransactionType?
  direction   TransactionDirection?
  balanceBefore Int?
  balanceAfter  Int?
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id])
  
  @@map("qiancaidou_transactions")
}

// 商品模型
model Product {
  id                  Int         @id @default(autoincrement())
  title               String
  description         String
  images              String[]    @default([])
  priceInQiancaiDou   Int         // 仟彩豆价格
  stock               Int         @default(0)
  category            String      @default("general")
  isActive            Boolean     @default(true)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // 关联关系
  orderItems          OrderItem[]
  cartItems           CartItem[]
  inventoryLocks      InventoryLock[]
  
  @@map("products")
}

// 订单模型
model Order {
  id                  Int         @id @default(autoincrement())
  userId              Int
  user                User        @relation(fields: [userId], references: [id])
  totalCost           Int         // 总仟彩豆消费
  status              OrderStatus @default(PENDING) // PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED
  payMethod           PayMethod   @default(QIANCAIDOU)
  shippingAddressId   Int?        // 配送地址ID
  trackingNumber      String?     // 物流单号
  estimatedDelivery   DateTime?   // 预计送达时间
  note                String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  paidAt              DateTime?
  cancelledAt         DateTime?
  fulfilledAt         DateTime?
  refundedAt          DateTime?
  
  // 关联关系
  items               OrderItem[]
  inventoryLocks      InventoryLock[]
  transactions        QiancaiDouTransaction[]
  shipment            Shipment?
  shippingAddress     Address?    @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  shippingTracks      ShippingTrack[]
  
  @@map("orders")
}

// 订单项目
model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Int     // 单价（仟彩豆）
  totalPrice  Int     // 小计（仟彩豆）
  
  @@map("order_items")
}

// 线下课程
model OfflineCourse {
  id           Int               @id @default(autoincrement())
  title        String
  description  String
  instructor   String?
  category     String            // AI编程学习, 英语学习, 留学咨询, 夏令营
  duration     Int?              // 课程时长（分钟）
  imageUrl     String?
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // 关联关系
  schedules    CourseSchedule[]
  
  @@map("offline_courses")
}

// 课程时间安排
model CourseSchedule {
  id           Int               @id @default(autoincrement())
  courseId     Int
  course       OfflineCourse     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  startTime    DateTime
  endTime      DateTime
  location     String?           // 上课地点
  capacity     Int               @default(10)
  bookedSlots  Int               @default(0)
  feeInQiancaiDou Int            @default(0) // 预约费用（保留但不再使用）
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  
  // 关联关系
  appointments UserAppointment[]
  
  @@map("course_schedules")
}

// 用户预约/注册
model UserAppointment {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  scheduleId  Int
  schedule    CourseSchedule @relation(fields: [scheduleId], references: [id])
  status      String         @default("REGISTERED") // REGISTERED, CANCELLED, COMPLETED, NO_SHOW
  note        String?        // 用户备注
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@unique([userId, scheduleId])
  @@map("user_appointments")
}

// 学习彩注册
model LearningRegistration {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  itemId      String   @map("item_id") // 课程/服务/夏令营的ID
  itemType    String   @map("item_type") // course, service, camp
  title       String
  subtitle    String
  category    String
  status      String   @default("REGISTERED") // REGISTERED, CANCELLED, COMPLETED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([userId, itemId, itemType])
  @@map("learning_registrations")
}

// 旅游文章
model TravelPost {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  summary     String?
  category    String   // DOMESTIC, INTERNATIONAL
  subcategory String?  // 文化体验, 自然风光, 城市探索 等
  tags        String[] @default([])
  imageUrl    String?
  images      String[] @default([])
  author      String?
  isPublished Boolean  @default(false)
  viewCount   Int      @default(0)
  packageId   Int?     // 关联旅游套餐
  package     TravelPackage? @relation(fields: [packageId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("travel_posts")
}

// 旅游套餐
model TravelPackage {
  id                  Int       @id @default(autoincrement())
  title               String
  description         String?
  category            String    // DOMESTIC, INTERNATIONAL
  subcategory         String?   // 文化体验, 自然风光, 城市探索 等
  durationDays        Int?      // 行程天数
  maxParticipants     Int       @default(20) // 最大参与人数
  currentParticipants Int       @default(0) // 当前参与人数
  startDate           DateTime? // 出发日期
  endDate             DateTime? // 结束日期
  location            String?   // 目的地
  imageUrl            String?   // 主图片
  images              String[]  @default([]) // 图片数组
  tags                String[]  @default([]) // 标签数组
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // 关联关系
  registrations       TravelRegistration[]
  posts               TravelPost[]
  
  @@map("travel_packages")
}

// 旅游注册
model TravelRegistration {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  packageId   Int      @map("package_id")
  package     TravelPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  title       String
  subtitle    String?
  category    String
  status      String   @default("REGISTERED") // REGISTERED, CANCELLED, COMPLETED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([userId, packageId])
  @@map("travel_registrations")
}

// 账户：仟彩豆可用/锁定余额
model Account {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  availableBalance Int      @default(0)
  lockedBalance    Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("accounts")
}

// 服务器购物车
model Cart {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
  itemsCount  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cartId     Int
  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int

  @@unique([cartId, productId])
  @@map("cart_items")
}

// 库存锁
model InventoryLock {
  id         Int                 @id @default(autoincrement())
  orderId    Int
  order      Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product             @relation(fields: [productId], references: [id])
  quantity   Int
  status     InventoryLockStatus @default(LOCKED)
  expiresAt  DateTime?           // 锁定过期时间
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("inventory_locks")
}

// 地址簿
model Address {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiverName  String
  phone         String
  province      String
  city          String
  district      String?
  detail        String
  zip           String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // 关联关系
  orders        Order[]  @relation("OrderShippingAddress")

  @@map("addresses")
}

// 发货信息
model Shipment {
  id          Int            @id @default(autoincrement())
  orderId     Int            @unique
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carrier     String?
  trackingNo  String?
  status      ShipmentStatus @default(PENDING)
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("shipments")
}

// 物流跟踪
model ShippingTrack {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      String    // 物流状态
  description String?   // 状态描述
  location    String?   // 当前位置
  timestamp   DateTime  @default(now())

  @@map("shipping_tracks")
}

// ===== Enums =====
enum PayMethod {
  QIANCAIDOU
}

enum InventoryLockStatus {
  LOCKED
  RELEASED
  CONSUMED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum OrderStatus {
  PENDING      // 待支付
  PAID         // 已支付
  PROCESSING   // 处理中
  SHIPPED      // 已发货
  DELIVERED    // 已送达
  CANCELLED    // 已取消
  REFUNDED     // 已退款
}

enum QiancaiDouTransactionType {
  EARN
  SPEND
  REFUND
  LOCK
  UNLOCK
  ADJUST
}

enum TransactionDirection {
  CREDIT
  DEBIT
}

// 应用设置（键值对存储），用于放置 SEED_TOKEN 等
model AppSetting {
  key       String   @id
  value     String
  updatedAt DateTime @default(now())

  @@map("app_settings")
}

// 留学咨询服务
model StudyAbroadService {
  id                Int       @id @default(autoincrement())
  serviceName       String
  description       String?
  serviceType       String    // PLANNING, APPLICATION, VISA, PREPARATION, SUPPORT
  durationWeeks     Int?
  priceUsd          Decimal?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  
  // 关联关系
  registrations     UserStudyAbroadRegistration[]
  
  @@map("study_abroad_services")
}

// 夏令营
model SummerCamp {
  id                Int       @id @default(autoincrement())
  name              String
  location          String?
  description       String?
  imageUrl          String?
  startDate         DateTime?
  endDate           DateTime?
  ageRange          String?
  priceUsd          Decimal?
  maxParticipants   Int       @default(30)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  
  // 关联关系
  registrations     UserSummerCampRegistration[]
  
  @@map("summer_camps")
}

// 用户留学咨询注册
model UserStudyAbroadRegistration {
  id                Int       @id @default(autoincrement())
  userId            Int
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId         Int
  service           StudyAbroadService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  registrationStatus String   @default("REGISTERED") // REGISTERED, CANCELLED, COMPLETED
  registeredAt      DateTime  @default(now())
  cancelledAt       DateTime?
  completedAt       DateTime?
  
  @@unique([userId, serviceId])
  @@map("user_study_abroad_registrations")
}

// 用户夏令营注册
model UserSummerCampRegistration {
  id                Int       @id @default(autoincrement())
  userId            Int
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  summerCampId      Int
  summerCamp        SummerCamp @relation(fields: [summerCampId], references: [id], onDelete: Cascade)
  registrationStatus String   @default("REGISTERED") // REGISTERED, CANCELLED, COMPLETED
  registeredAt      DateTime  @default(now())
  cancelledAt       DateTime?
  completedAt       DateTime?
  
  @@unique([userId, summerCampId])
  @@map("user_summer_camp_registrations")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  passwordHash            String
  qiancaiDouBalance       Int                      @default(0)
  firstName               String?
  lastName                String?
  avatarUrl               String?
  avatarData              String?                  // Base64编码的头像数据
  avatarMimeType          String?                  // 头像MIME类型
  avatarSize              Int?                     // 头像文件大小（字节）
  language                String                   @default("zh")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  
  // 关联关系
  qiancaiDouTransactions  QiancaiDouTransaction[]
  orders                  Order[]
  appointments            UserAppointment[]
  account                 Account?
  
  @@map("users")
}

// 仟彩豆交易记录
model QiancaiDouTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int      // 正数为增加，负数为减少
  newBalance  Int      // 交易后的余额
  reason      String   // 交易原因: ADMIN_ADJUSTMENT, PRODUCT_REDEMPTION, APPOINTMENT_FEE, TASK_REWARD
  description String?  // 详细描述
  refTable    String?  // 关联表名
  refId       String?  // 关联记录ID
  createdAt   DateTime @default(now())
  // 新增字段（向后兼容，可为空）
  type        QiancaiDouTransactionType?
  direction   TransactionDirection?
  balanceBefore Int?
  balanceAfter  Int?
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id])
  
  @@map("qiancaidou_transactions")
}

// 商品模型
model Product {
  id                  Int         @id @default(autoincrement())
  title               String
  description         String
  images              String[]    @default([])
  priceInQiancaiDou   Int         // 仟彩豆价格
  stock               Int         @default(0)
  category            String      @default("general")
  isActive            Boolean     @default(true)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // 关联关系
  orderItems          OrderItem[]
  
  @@map("products")
}

// 订单模型
model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  totalCost       Int         // 总仟彩豆消费
  status          String      @default("PENDING") // PENDING, PAID, CANCELLED, FULFILLED, REFUNDED
  payMethod       PayMethod   @default(QIANCAIDOU)
  shippingAddress String?
  note            String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  paidAt          DateTime?
  cancelledAt     DateTime?
  fulfilledAt     DateTime?
  refundedAt      DateTime?
  
  // 关联关系
  items           OrderItem[]
  inventoryLocks  InventoryLock[]
  transactions    QiancaiDouTransaction[]
  
  @@map("orders")
}

// 订单项目
model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Int     // 单价（仟彩豆）
  totalPrice  Int     // 小计（仟彩豆）
  
  @@map("order_items")
}

// 线下课程
model OfflineCourse {
  id           Int               @id @default(autoincrement())
  title        String
  description  String
  instructor   String?
  category     String            // ENGLISH_ORAL, AI_PROGRAMMING
  duration     Int?              // 课程时长（分钟）
  imageUrl     String?
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // 关联关系
  schedules    CourseSchedule[]
  
  @@map("offline_courses")
}

// 课程时间安排
model CourseSchedule {
  id           Int               @id @default(autoincrement())
  courseId     Int
  course       OfflineCourse     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  startTime    DateTime
  endTime      DateTime
  location     String?           // 上课地点
  capacity     Int               @default(10)
  bookedSlots  Int               @default(0)
  feeInQiancaiDou Int            @default(0) // 预约费用
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  
  // 关联关系
  appointments UserAppointment[]
  
  @@map("course_schedules")
}

// 用户预约
model UserAppointment {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  scheduleId  Int
  schedule    CourseSchedule @relation(fields: [scheduleId], references: [id])
  status      String         @default("BOOKED") // BOOKED, CANCELLED, COMPLETED, NO_SHOW
  note        String?        // 用户备注
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@unique([userId, scheduleId])
  @@map("user_appointments")
}

// 旅游文章
model TravelPost {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  summary     String?
  category    String   // DOMESTIC, INTERNATIONAL
  tags        String[] @default([])
  imageUrl    String?
  images      String[] @default([])
  author      String?
  isPublished Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("travel_posts")
}

// 账户：仟彩豆可用/锁定余额
model Account {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  availableBalance Int      @default(0)
  lockedBalance    Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("accounts")
}

// 服务器购物车
model Cart {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
  itemsCount  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cartId     Int
  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int

  @@unique([cartId, productId])
  @@map("cart_items")
}

// 库存锁
model InventoryLock {
  id         Int                 @id @default(autoincrement())
  orderId    Int
  order      Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product             @relation(fields: [productId], references: [id])
  quantity   Int
  status     InventoryLockStatus @default(LOCKED)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("inventory_locks")
}

// 地址簿
model Address {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiverName  String
  phone         String
  province      String
  city          String
  district      String?
  detail        String
  zip           String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("addresses")
}

// 发货信息
model Shipment {
  id          Int            @id @default(autoincrement())
  orderId     Int            @unique
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carrier     String?
  trackingNo  String?
  status      ShipmentStatus @default(PENDING)
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("shipments")
}

// ===== Enums =====
enum PayMethod {
  QIANCAIDOU
}

enum InventoryLockStatus {
  LOCKED
  RELEASED
  CONSUMED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum QiancaiDouTransactionType {
  EARN
  SPEND
  REFUND
  LOCK
  UNLOCK
  ADJUST
}

enum TransactionDirection {
  CREDIT
  DEBIT
}
